
Client ID	:  YhvYDqSntCxLVR1hLWdt
               YhvYDqSntCxLVR1hLWdt
Client Secret	  :  UfidBKEeEm
                     UfidBKEeEm


안녕하세요! 기존 Spring MVC 및 MyBatis 프로젝트에 SDK 없이 네이버 로그인을 연동하는 방법을 단계별로 상세히 안내해 드리겠습니다.

제공해주신 카카오/구글 로그인 코드를 참고하여 네이버 로그인 기능도 동일한 패턴으로 구현하겠습니다. 팝업 방식과 동적 Redirect URI 처리 등 요청하신 모든 사항을 반영했습니다.

📥 1. 사전 준비 사항
네이버 로그인을 구현하기 전에 몇 가지 준비가 필요합니다.

네이버 개발자 센터 등록
네이버 개발자 센터에 접속하여 로그인합니다.
https://developers.naver.com/main/

Application > 애플리케이션 등록 메뉴로 이동합니다.

애플리케이션 이름을 입력하고, 사용 API에서 **네아로(네이버 아이디로 로그인)**를 선택합니다.

로그인 오픈 API 서비스 환경을 PC 웹으로 선택합니다.

서비스 URL과 로그인 Callback URL을 등록합니다.

서비스 URL: http://localhost:8080

Callback URL: http://localhost:8080/user/naverLogin

(추가) http://127.0.0.1:8080 환경에서도 테스트하려면 서비스 URL과 Callback URL에 127.0.0.1 버전도 추가로 등록해주는 것이 좋습니다.

등록이 완료되면 Client ID와 Client Secret을 발급받게 됩니다. 이 두 값을 코드에서 사용하게 되니 잘 보관해주세요.

**라이브러리 다운로드 (
.jar 파일)**

Maven을 사용하지 않으므로, JSON 데이터를 Java 객체로 변환하기 위한 Jackson 라이브러리가 필요합니다. 이미 UserController에서 ObjectMapper를 사용하고 있으므로, 해당 라이브러리가 WEB-INF/lib 폴더에 있는지 확인해주세요. 없다면 아래 파일들을 다운로드하여 추가해야 합니다.

Jackson Databind: jackson-databind-2.9.8.jar (또는 최신 안정 버전)

Jackson Core: jackson-core-2.9.8.jar

Jackson Annotations: jackson-annotations-2.9.8.jar

👉 다운로드 링크: Maven Central Repository 에서 각 라이브러리를 검색하여 다운로드할 수 있습니다.

✏️ 2. JSP 파일 수정 및 추가
loginView.jsp 수정
기존 loginView.jsp에 네이버 로그인 버튼과 관련 JavaScript 함수를 추가합니다.

Java

<%@ page contentType="text/html; charset=UTF-8" %>
<%@ page pageEncoding="UTF-8" %>
<%-- 세션에 state 토큰 저장을 위해 import --%>
<%@ page import="java.math.BigInteger" %>
<%@ page import="java.security.SecureRandom" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>로그인 화면</title>
    <link rel="stylesheet" href="/css/admin.css" type="text/css">
    <script src="http://code.jquery.com/jquery-2.1.4.min.js"></script>

    <script type="text/javascript">
        $(function() {
            // 기존 로그인, 회원가입 로직 ... (생략)

            // ============= 카카오 로그인 버튼 Event 연결 =============
            $("#kakaoLoginBtn").on("click", function() {
                kakaoLoginPopup();
            });
            
            // ============= 구글 로그인 버튼 Event 연결 =============
            $("#googleLoginBtn").on("click", function() {
                googleLoginPopup();
            });

            // ============= [신규] 네이버 로그인 버튼 Event 연결 =============
            $("#naverLoginBtn").on("click", function() {
                naverLoginPopup();
            });
        });

        // ============= 회원원가입화면이동 =============
        // (생략) ...

        // ============= 카카오 로그인 팝업 처리 함수 =============
        // (생략) ...
        
        // ============= 구글 로그인 팝업 처리 함수 =============
        // (생략) ...

        // ============= [신규] 네이버 로그인 팝업 처리 함수 =============
        function naverLoginPopup() {
            // 1. Naver Developer Center에서 발급받은 Client ID
            const NAVER_CLIENT_ID = "YOUR_NAVER_CLIENT_ID"; // ◀◀◀ 여기에 발급받은 클라이언트 ID를 입력하세요.

            // 2. 동적으로 Redirect URI 생성 (현재 접속한 프로토콜, 호스트, 포트 기준)
            const NAVER_REDIRECT_URI = window.location.origin + '/user/naverLogin';
            
            // 3. CSRF 방지를 위한 state 값 생성 (JSP 상단에서 생성한 값을 사용)
            const state = "${state}"; // 아래 body 부분에서 JSP 스크립틀릿으로 생성한 값을 가져옵니다.

            // 4. OAuth 2.0 인증 URL 생성
            const authUrl = "https://nid.naver.com/oauth2.0/authorize?response_type=code"
                        + "&client_id=" + NAVER_CLIENT_ID
                        + "&redirect_uri=" + encodeURIComponent(NAVER_REDIRECT_URI)
                        + "&state=" + state;

            // [디버깅] 생성된 인증 URL과 Redirect URI, state 값을 콘솔에 출력
            console.log("네이버 인증 URL:", authUrl);
            console.log("동적 Redirect URI:", NAVER_REDIRECT_URI);
            console.log("State 값:", state);

            // 5. 팝업 창 열기
            window.open(authUrl, 'naverLoginPopup', 'width=600,height=700');
        }

        // ============= [신규] 네이버 로그인 팝업 콜백 함수 =============
        // 이 함수는 팝업(naverCallback.jsp)에서 로그인이 성공했을 때 호출합니다.
        function naverLoginCallback(userId) {
            console.log("naverLoginCallback 호출됨! userId:", userId);
            // 부모창(index.jsp)의 프레임들을 새로고침하여 로그인 상태를 반영
            $(window.parent.frames["topFrame"].document.location).attr("href","/layout/top.jsp");
            $(window.parent.frames["leftFrame"].document.location).attr("href","/layout/left.jsp");
            $(window.parent.frames["rightFrame"].document.location).attr("href","/user/getUser?userId="+userId);
        }

        // 구글/카카오 콜백 함수 (생략) ...
    </script>
</head>

<body bgcolor="#ffffff" text="#000000">

<%
    // CSRF 공격 방지를 위한 state 토큰 생성 및 세션에 저장
    String state = new BigInteger(130, new SecureRandom()).toString();
    session.setAttribute("state", state);
%>

<form onsubmit="return false;">
    <div align="center">
        <TABLE WITH="100%" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
            <TR>
                <TD ALIGN="CENTER" VALIGN="MIDDLE">
                    <table width="650" height="390" border="5" cellpadding="0" cellspacing="0" bordercolor="#D6CDB7">
                        <tr>
                            <td width="10" height="5" align="left" valign="top" bordercolor="#D6CDB7">
                                <table width="650" height="390" border="0" cellpadding="0" cellspacing="0">
                                    <tr>
                                        <td width="345" align="left" valign="top">
                                            <table width="100%" height="220" border="0" cellpadding="0" cellspacing="0">
                                                <tr>
                                                    <td colspan="4" align="center" style="padding-top:10px;">
                                                        <img id="kakaoLoginBtn" src="/images/kakao_login_medium_narrow.jpg" style="cursor:pointer;"/>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td colspan="4" align="center" style="padding-top:5px;">
                                                        <img id="googleLoginBtn" src="/images/btn_google_signin_light_normal_web.png" style="cursor:pointer; height: 45px;"/>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td colspan="4" align="center" style="padding-top:5px;">
                                                        <img id="naverLoginBtn" src="/images/btnG_official.png" style="cursor:pointer; height: 45px;"/>
                                                        </td>
                                                    </tr>
                                            </table>
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                </TD>
            </TR>
        </TABLE>
    </div>
</form>

</body>
</html>
/webapp/user/naverCallback.jsp 파일 신규 생성
네이버 로그인 성공 후, 팝업 창에서 부모 창으로 정보를 전달하고 스스로 닫히는 역할을 할 JSP 파일을 새로 만듭니다.

Java

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>네이버 로그인 처리</title>
<script type.text/javascript">
window.onload = function() {
    // Controller에서 model에 담아준 로그인 성공 여부와 사용자 ID를 확인
    const loginSuccess = "${loginSuccess}";
    const userId = "${userId}";

    console.log("naverCallback.jsp 로드됨");
    console.log("로그인 성공 여부:", loginSuccess);
    console.log("사용자 ID:", userId);

    if (loginSuccess === "true" && userId) {
        // 부모 창(loginView.jsp)의 콜백 함수(naverLoginCallback)를 호출
        // opener는 팝업을 띄운 부모 창을 의미합니다.
        if (window.opener && window.opener.naverLoginCallback) {
            console.log("부모 창의 naverLoginCallback 함수 호출 시도");
            window.opener.naverLoginCallback(userId);
        } else {
            console.error("부모 창 또는 콜백 함수를 찾을 수 없습니다.");
            alert("로그인 처리 중 오류가 발생했습니다. (부모 창 없음)");
        }
    } else {
        // 로그인 실패 시
        const errorMessage = "${errorMessage}";
        console.error("네이버 로그인 실패:", errorMessage);
        alert("네이버 로그인에 실패했습니다. " + errorMessage);
    }

    // 모든 처리가 끝나면 팝업 창을 닫음
    console.log("팝업 창을 닫습니다.");
    window.close();
};
</script>
</head>
<body>
    로그인 처리 중...
</body>
</html>
☕ 3. UserController.java 수정
네이버 로그인 콜백을 처리할 메소드와 관련 헬퍼 메소드들을 추가합니다.

Java

// UserController.java

// ================== 필요한 import 문 추가 ==================
// (기존 import문은 생략)
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder; // Redirect URI 인코딩에 사용
import java.util.Map;
import javax.servlet.http.HttpServletRequest; // 동적 Redirect URI 생성에 필요
import javax.servlet.http.HttpSession;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
// ... (기존 다른 import문)
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/user/*")
public class UserController {

    // (기존 코드 생략) ...

    // ============= [신규] 네이버 로그인 콜백 처리 메소드 추가 =============
    @RequestMapping(value="naverLogin", method=RequestMethod.GET)
    public String naverLogin(@RequestParam("code") String code, 
                             @RequestParam("state") String state, 
                             HttpSession session,
                             HttpServletRequest request,
                             Model model) throws Exception {

        System.out.println("\n============== NAVER LOGIN START ==============");
        System.out.println("1. /user/naverLogin GET 요청 받음 (Callback)");

        // [디버깅] 전달받은 code, state 값 확인
        System.out.println("   - Authorization Code: " + code);
        System.out.println("   - State: " + state);

        // [보안] 세션에 저장된 state와 콜백으로 전달받은 state가 일치하는지 확인
        String sessionState = (String) session.getAttribute("state");
        System.out.println("   - Session State: " + sessionState);
        if (sessionState == null || !sessionState.equals(state)) {
            System.out.println("[ERROR] 세션이 만료되었거나 유효하지 않은 state 값입니다.");
            model.addAttribute("loginSuccess", false);
            model.addAttribute("errorMessage", "세션 불일치 오류");
            return "forward:/user/naverCallback.jsp";
        }
        session.removeAttribute("state"); // 사용한 state 값은 즉시 제거

        // 2. 인가 코드를 사용하여 Access Token 요청
        String accessToken = getNaverAccessToken(code, state, request);
        if (accessToken == null) {
            System.out.println("[ERROR] Access Token 받기 실패");
            model.addAttribute("loginSuccess", false);
            model.addAttribute("errorMessage", "토큰 발급 실패");
            return "forward:/user/naverCallback.jsp";
        }
        System.out.println("2. Access Token 받기 성공: " + accessToken);

        // 3. Access Token으로 네이버 사용자 정보 요청
        Map<String, Object> naverUserInfo = getNaverUserInfo(accessToken);
        if (naverUserInfo == null) {
            System.out.println("[ERROR] 네이버 사용자 정보 받기 실패");
            model.addAttribute("loginSuccess", false);
            model.addAttribute("errorMessage", "사용자 정보 조회 실패");
            return "forward:/user/naverCallback.jsp";
        }
        System.out.println("3. 네이버 사용자 정보 받기 성공: " + naverUserInfo);
        
        // 4. 네이버 사용자 정보 기반으로 회원 정보 확인 및 처리
        Map<String, String> response = (Map<String, String>) naverUserInfo.get("response");
        String naverId = response.get("id");
        String email = response.get("email");
        String userName = response.get("name");
        String userId = "n_" + naverId; // 기존 회원 ID와 충돌 방지를 위해 'n_' 접두사 추가

        // [디버깅] 네이버에서 받은 사용자 정보 로그
        System.out.println("   - Naver Unique ID: " + naverId);
        System.out.println("   - Email: " + email);
        System.out.println("   - Name: " + userName);
        System.out.println("   - Generated System userId: " + userId);

        User user = userService.getUser(userId);

        // 5. 비회원일 경우 자동 회원가입
        if (user == null) {
            System.out.println("4. 비회원 확인. 자동 회원가입을 시작합니다.");
            user = new User();
            user.setUserId(userId);
            user.setUserName(userName);
            user.setEmail(email);
            user.setPassword(naverId); // naverId를 임시 비밀번호로 저장
            user.setRole("user"); 

            System.out.println("   - DB 저장 직전 User 객체: " + user);
            userService.addUser(user);
            System.out.println("5. 신규 회원가입 완료.");
        } else {
            System.out.println("4. 기존 회원 확인: " + user.getUserId());
        }

        // 6. 세션에 로그인 정보 저장
        session.setAttribute("user", user);
        model.addAttribute("loginSuccess", true);
        model.addAttribute("userId", user.getUserId());

        System.out.println("6. 세션 저장 완료. User ID: " + user.getUserId());
        System.out.println("============== NAVER LOGIN END ==============\n");

        // 7. 팝업을 제어할 JSP로 포워딩
        return "forward:/user/naverCallback.jsp";
    }

    /**
     * [신규] 인가 코드로 Access Token을 요청하는 헬퍼 메소드
     */
    private String getNaverAccessToken(String code, String state, HttpServletRequest request) throws Exception {
        // 1. 네이버 개발자 센터에서 발급받은 정보
        String clientId = "YOUR_NAVER_CLIENT_ID"; // ◀◀◀ 여기에 클라이언트 ID 입력
        String clientSecret = "YOUR_NAVER_CLIENT_SECRET"; // ◀◀◀ 여기에 클라이언트 시크릿 입력

        // 2. 동적 Redirect URI 생성
        // 요청받은 URL("http://localhost:8080/user/naverLogin")을 그대로 사용
        String redirectURI = request.getRequestURL().toString();
        
        // 3. 토큰 발급 요청 URL
        String tokenUrl = "https://nid.naver.com/oauth2.0/token";
        URL url = new URL(tokenUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        // 4. POST 요청 본문 작성
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
        StringBuilder sb = new StringBuilder();
        sb.append("grant_type=authorization_code");
        sb.append("&client_id=").append(clientId);
        sb.append("&client_secret=").append(clientSecret);
        sb.append("&redirect_uri=").append(URLEncoder.encode(redirectURI, "UTF-8"));
        sb.append("&code=").append(code);
        sb.append("&state=").append(state);
        bw.write(sb.toString());
        bw.flush();

        // [디버깅] 토큰 요청 정보 및 응답 코드 출력
        System.out.println("\n   [getNaverAccessToken] >> Request URL: " + tokenUrl);
        System.out.println("   [getNaverAccessToken] >> Request Body: " + sb.toString());
        int responseCode = conn.getResponseCode();
        System.out.println("   [getNaverAccessToken] >> Response Code: " + responseCode);

        if (responseCode == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            StringBuilder result = new StringBuilder();
            while ((line = br.readLine()) != null) {
                result.append(line);
            }
            br.close();
            bw.close();

            // [디버깅] 토큰 응답 결과 출력
            System.out.println("   [getNaverAccessToken] >> Response Body: " + result.toString() + "\n");

            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> jsonMap = objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
            return (String) jsonMap.get("access_token");
        }
        return null;
    }

    /**
     * [신규] Access Token으로 사용자 정보를 요청하는 헬퍼 메소드
     */
    private Map<String, Object> getNaverUserInfo(String accessToken) throws Exception {
        String userInfoUrl = "https://openapi.naver.com/v1/nid/me";
        URL url = new URL(userInfoUrl);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", "Bearer " + accessToken);

        int responseCode = conn.getResponseCode();
        System.out.println("\n   [getNaverUserInfo] >> Request URL: " + userInfoUrl);
        System.out.println("   [getNaverUserInfo] >> Response Code: " + responseCode);

        if (responseCode == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            StringBuilder result = new StringBuilder();
            while ((line = br.readLine()) != null) {
                result.append(line);
            }
            br.close();

            // [디버깅] 사용자 정보 응답 출력
            System.out.println("   [getNaverUserInfo] >> Response Body: " + result.toString() + "\n");

            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
        }
        return null;
    }
    
    // (기존 다른 메소드들 생략) ...
}
✅ 최종 확인 및 실행 가이드
네이버 공식 로그인 버튼 이미지를 다운로드하여 /webapp/images/ 폴더에 btnG_official.png 와 같은 이름으로 저장합니다.

loginView.jsp와 UserController.java 코드에 있는 YOUR_NAVER_CLIENT_ID와 YOUR_NAVER_CLIENT_SECRET을 본인이 발급받은 값으로 반드시 교체합니다.

Jackson 라이브러리(.jar) 파일들이 /webapp/WEB-INF/lib 폴더에 있는지 다시 한번 확인합니다.

Tomcat 서버를 재시작하고 http://localhost:8080/user/loginView.jsp로 접속하여 네이버 로그인 버튼이 보이는지 확인합니다.

버튼을 클릭하여 팝업 창이 정상적으로 뜨는지, 로그인 후 팝업이 닫히면서 원래 페이지의 로그인이 완료되는지 확인합니다.

Eclipse/STS의 Console을 통해 System.out.println으로 추가한 디버깅 로그가 순서대로 출력되는지 확인하여 문제 발생 시 원인을 파악합니다.

이제 모든 설정이 완료되었습니다. 위 가이드를 따라 진행하시면 성공적으로 네이버 로그인 기능을 연동할 수 있을 것입니다.