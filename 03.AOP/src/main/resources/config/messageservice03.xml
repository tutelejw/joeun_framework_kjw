<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
					http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Target Object Definition -->
	<bean 	id="messageTarget"	class="spring.service.aop.impl.MessageImpl"/>
					
	<!-- advice Definition -->
	<bean 	id="testAdvice"		class="spring.service.aop.advice.TestAdvice"/>
					
	<!-- Point Cut Definition : advice 를 어느 join-point 에 적용 Rule  -->
	<bean 	id="testPointcut" 
					class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<!-- execution( modifier?  returnType  package?  MethodName( parameter)  ) 
		       ==> ? 은 one or not at all 
		       ==> * 1개이상 모든값 표현 
		       ==> .. parameter 에서는 0개이상 :: package 에서는 현재 및 하위 package  
		      <<예>>                            
		      public void set*(..) 	==> set 으로 시작하는 파라미터가 0개 이상인 method 
		      * a.b.c.*.*() 				==> a.b.c package 의 파라미터가 없는 모든 method 
		      * a.b.c..*.*(..) 			==> a.b.c 및 하위 package 의 파라미터가 0개 이상 모든 method                             
			  String a.b.c.UserServiceImpl.addUser(..) ==> String return 하는 UserServiceImpl 의
			                                                                                 addUser() method
			   * get*(*) 			==> get 이 포함된 파라미터를 1개 받는 method 
			   * get*(*,*) 		==> get 이 포함된 파라미터를 2개 받는 method 
			   * add*(String, ..) ==> get 이 포함된 1번째 파라미터는 String 이며 1개이상의
			                                파라미터를 갖는 method 호출
			  		 	
				아래는 ::  public 이며, return 이 void 가아니고, 
						    ::  get 으로 시작하는,0개 이상의 파라미터를 같는 method -->							 
		<property 	name="expression" 	 value="execution(public !void get*(..))" />
	</bean>
	
	<!-- Advisor(Aspect)  Definition: advice + Point Cut -->
	<bean 	id="testAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="testAdvice"/>
		<property name="pointcut" ref="testPointcut"/>
	</bean>
	
	<!-- Dynamic Proxy 를  생성하는 ProxyFactoryBean 생성 -->
	<bean 	id="message"  class="org.springframework.aop.framework.ProxyFactoryBean">
		<property 	name="proxyInterfaces" 	value="spring.service.aop.Message"/>
		<property name="interceptorNames" value="testAdvisor" />
		<property name="target" ref="messageTarget"/>
	</bean>	
	
</beans>