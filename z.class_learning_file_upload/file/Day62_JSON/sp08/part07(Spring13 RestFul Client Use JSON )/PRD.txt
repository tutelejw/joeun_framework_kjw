=================================================
PRD : Product Requirement Document : 제품요구서 작성 : ???
--------------------------------------------------
-- 용어에 익숙해지자 
: 구현요구사항을 AI 에 전달 하는 skill 을 익힘.
: 요구사항을 정확히 지시 : Prompt Detail
: 직접 지시가 아니라 AI 와 협업 
   예> 이렇게 하려면 어떻게 해야해 ? 
         : 난 알고 있지만. AI 가 생각하고 해결 할 수 있도록

: Low-code / Prompt Engineering / Ai-assisted coding
=================================================


##### Prompt > RestHttpClientApp_Aiassisted.java 구현

0. Domain Object  : User.java

package spring.domain;

import java.io.Serializable;
import java.sql.Timestamp;

/*
 * FileName : User.java  
 * ㅇ User 의 정보를 갖는 Value Object (도메인객체,비지니스객체)
 * ㅇ USERS TABLE 의 1개의 ROW 의 정보를 갖는다.  
*/ 
public class User implements Serializable {

	///Field
    private String userId; 			// 회원 ID 
    private String userName;		// 회원 이름 
    private String password;     // 비밀번호 
    private Integer age;    			// 나이 :: Integer wrapper class 사용 :: 추후 용도 확인  
    private int grade;    				// 등급 :: int primitive 사용 :: :: 추후 용도 확인 
    private Timestamp regDate	; // 가입일자 
    //private Timestamp regDate	= new Timestamp(new Date().getTime()); // 가입일자
    private boolean active; 
    
    ///Constructor
    public User() {
	}
    public User (	String userId, String userName,String password, 
    							Integer age, int grade ) {
		this.userId = userId;
		this.userName = userName;
		this.password = password;
		this.age = age;
		this.grade = grade;
	}    

	///Method (getter/setter)
	public String getUserId(){
		return this.userId;
	}
	public void setUserId( String userId ){
	   this.userId= userId;
	}
	public String getPassword(){
	   return this.password;
	}
	public void setPassword( String password ){
	   this.password= password;
	}
	public Integer getAge() {
		return age;
	}
	public void setAge(Integer age) {
		this.age = age;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public java.sql.Timestamp getRegDate() {
		return regDate;
	}
	public void setRegDate(java.sql.Timestamp regDate) {
		this.regDate = regDate;
	}
	public int getGrade() {
		return grade;
	}
	public void setGrade(int grade) {
		this.grade = grade;
	}
	public void setActive(boolean active) {
		this.active = active;
	}
	public boolean isActive() {
		return active;
	}
	@Override
	public String toString() {
		return "User [userid=" + userId + ", userName=" + userName + ", password="
				+ password + ", age=" + age + ", grade=" + grade+ ", active=" + active
				+ ", regDate=" + regDate + "]";
	}
}//end of class


1. httpcomponents-client-4.3.4 사용 구현


1.1  Mehtod 구현

public static void ReqeustHttpGet_UseJsonSimple() throws Exception 

: Get 방식요청
: URL : "http://127.0.0.1:8080/Spring13/app/userAPI/getUser?name=홍길동&age=10";
: 서버 에서 받는 JSON Data ( 서버에서 User 객체 => JSON 변화되었음.)
: json_simple-1.1 사용 확인


public static void ReqeustHttpGet_UseCodeHaus() throws Exception

: Get 방식요청
: URL : "http://127.0.0.1:8080/Spring13/app/userAPI/getUserMore/user01?name=홍길동&age=10";
: 서버 에서 받는 JSON Data  : json 형식의 다양한 데이터
   User 객체 => JSON 변환된 정보는 innerjson 으로 이름 은 user 임
: 서버 응답: {"user": {...User...}, "message": "..."} 등 복합 JSON
: jackson-core-asl-1.9.13.jar / - jackson-mapper-asl-1.9.13.jar 사용 확인




public static void ReqeustHttpPostData_UseJsonSimple() throws Exception

: Post 방식요청
: URL :  "http://127.0.0.1:8080/Spring13/app/userAPI/getUser";
: Body 전송 JSON Data  :  "{\"userId\":\"test\",\"userName\":\"홍길동\"}";
:  json_simple-1.1 사용
: 서버 에서 받는 JSON Data ( User 객체 => JSON 변화되었음.)
: json_simple-1.1 사용 확인



public static void ReqeustHttpPostData_UseCodeHaus() throws Exception

: Post 방식요청
: URL :  "http://127.0.0.1:8080/Spring13/app/userAPI/getUserMore/user01";
: Body 전송 JSON Data  :  "{\"userId\":\"test\",\"userName\":\"홍길동\"}";
: 서버 에서 받는 JSON Data  : json 형식의 다양한 데이터
   User 객체 => JSON 변환된 정보는 innerjson 으로 이름 은 user 임
: jackson-core-asl-1.9.13.jar / - jackson-mapper-asl-1.9.13.jar 사용 확인





##### GPT 4


package client.app;

import org.apache.http.client.methods.*;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.StringEntity;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import spring.domain.User;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

import java.util.Map;


public class RestHttpClientApp_Aiassisted {
	
	// main Method
	public static void main(String[] args) throws Exception{
		
		////////////////////////////////////////////////////////////////////////////////////////////
		// 주석을 하나씩 처리해가며 실습
		////////////////////////////////////////////////////////////////////////////////////////////
		
//		System.out.println("\n====================================\n");
//		// 1.1 Http Get 방식 Request : JsonSimple lib 사용
//		RestHttpClientApp_Aiassisted.ReqeustHttpGet_UseJsonSimple();
		
//		System.out.println("\n====================================\n");
//		// 1.2 Http Get 방식 Request : CodeHaus lib 사용
//		RestHttpClientApp_Aiassisted.ReqeustHttpGet_UseCodeHaus();
		
		
		
//		System.out.println("\n====================================\n");
//		// 2.1 Http Protocol POST 방식 Request 
//		//	: Form Data전달(JSON 이용) / JsonSimple lib 사용 
//		RestHttpClientApp_Aiassisted.ReqeustHttpPostData_UseJsonSimple();
		
//		System.out.println("\n====================================\n");
//		// 2.2 Http Protocol POST 방식 Request 
//		//	: Form Data전달(JSON 이용) / CodeHaus lib 사용
		RestHttpClientApp_Aiassisted.ReqeustHttpPostData_UseCodeHaus();
	
	}
	
	
	//================================================================//
	//1.1 Http Protocol GET Request : JsonSimple 3rd party lib 사용
	public static void ReqeustHttpGet_UseJsonSimple() throws Exception {
	    String url = "http://127.0.0.1:8080/Spring13/app/userAPI/getUser?name=홍길동&age=10";

	    CloseableHttpClient client = HttpClients.createDefault();
	    HttpGet httpGet = new HttpGet(url);
	    httpGet.setHeader("Accept", "application/json");
	    httpGet.setHeader("Content-Type", "application/json");

	    HttpResponse response = client.execute(httpGet);
	    String json = EntityUtils.toString(response.getEntity(), "UTF-8");

	    // JSON 파싱
	    JSONParser parser = new JSONParser();
	    JSONObject obj = (JSONObject) parser.parse(json);

	    System.out.println("json-simple GET 수신 데이터: " + obj.toJSONString());
	    System.out.println("userId: " + obj.get("userId"));
	    System.out.println("userName: " + obj.get("userName"));

	    client.close();
	}


	
	
	//1.2 Http Protocol GET Request : JsonSimple + codehaus 3rd party lib 사용
	public static void ReqeustHttpGet_UseCodeHaus() throws Exception {
	    String url = "http://127.0.0.1:8080/Spring13/app/userAPI/getUserMore/user01?name=홍길동&age=10";

	    CloseableHttpClient client = HttpClients.createDefault();
	    HttpGet httpGet = new HttpGet(url);
	    httpGet.setHeader("Accept", "application/json");
	    httpGet.setHeader("Content-Type", "application/json");

	    HttpResponse response = client.execute(httpGet);
	    String json = EntityUtils.toString(response.getEntity(), "UTF-8");

	    // JSON 구조 예시: {"user": {...User객체...}, "otherInfo":"..." }
	    ObjectMapper mapper = new ObjectMapper();
	    Map<String, Object> map = mapper.readValue(json, Map.class);

	    // "user"라는 innerjson에서 User 객체로 변환
	    Object userJson = map.get("user");
	    User user = mapper.convertValue(userJson, User.class);

	    System.out.println("Jackson GET 수신 데이터: " + user);

	    client.close();
	}

	//================================================================//	
	
	
	//================================================================//
	//2.1 Http Protocol POST Request : FromData 전달 / JsonSimple 3rd party lib 사용
	public static void ReqeustHttpPostData_UseJsonSimple() throws Exception {
	    String url = "http://127.0.0.1:8080/Spring13/app/userAPI/getUser";

	    // 요청 바디 JSON 생성(json-simple)
	    JSONObject sendObj = new JSONObject();
	    sendObj.put("userId", "test");
	    sendObj.put("userName", "홍길동");

	    CloseableHttpClient client = HttpClients.createDefault();
	    HttpPost httpPost = new HttpPost(url);
	    httpPost.setHeader("Accept", "application/json");
	    httpPost.setHeader("Content-Type", "application/json; charset=UTF-8");
	    httpPost.setEntity(new StringEntity(sendObj.toJSONString(), "UTF-8"));

	    HttpResponse response = client.execute(httpPost);
	    String json = EntityUtils.toString(response.getEntity(), "UTF-8");

	    // 응답 JSON 파싱
	    JSONParser parser = new JSONParser();
	    JSONObject obj = (JSONObject) parser.parse(json);

	    System.out.println("json-simple POST 수신: " + obj.toJSONString());
	    System.out.println("userId: " + obj.get("userId"));
	    System.out.println("userName: " + obj.get("userName"));

	    client.close();
	}


	
	
	//2.2 Http Protocol POST 방식 Request : FromData전달 
	//==> JsonSimple + codehaus 3rd party lib 사용
	public static void ReqeustHttpPostData_UseCodeHaus() throws Exception {
	    String url = "http://127.0.0.1:8080/Spring13/app/userAPI/getUserMore/user01";

	    // 바디 JSON String 생성
	    String body = "{\"userId\":\"test\",\"userName\":\"홍길동\"}";

	    CloseableHttpClient client = HttpClients.createDefault();
	    HttpPost httpPost = new HttpPost(url);
	    httpPost.setHeader("Accept", "application/json");
	    httpPost.setHeader("Content-Type", "application/json; charset=UTF-8");
	    httpPost.setEntity(new StringEntity(body, "UTF-8"));

	    HttpResponse response = client.execute(httpPost);
	    String json = EntityUtils.toString(response.getEntity(), "UTF-8");

	    // {"user": {...User객체...}, "result":"ok"}
	    ObjectMapper mapper = new ObjectMapper();
	    Map<String, Object> map = mapper.readValue(json, Map.class);

	    Object userJson = map.get("user");
	    User user = mapper.convertValue(userJson, User.class);

	    System.out.println("Jackson POST 수신 데이터: " + user);

	    client.close();
	}

}


##### GPT 5

package client;

import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.*;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.*;
import org.apache.http.util.EntityUtils;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

import spring.domain.User;

public class RestHttpClientApp_Aiassisted {

    // ================= 공통 설정 =================
    private static final String HOST = "http://127.0.0.1:8080/Spring13/app";
    private static final Charset UTF8 = Charset.forName("UTF-8");

    private static CloseableHttpClient newClient() {
        RequestConfig cfg = RequestConfig.custom()
                .setConnectTimeout(5000)
                .setSocketTimeout(5000)
                .build();
        return HttpClients.custom()
                .setDefaultRequestConfig(cfg)
                .build();
    }

    private static String readBody(HttpResponse resp) throws Exception {
        HttpEntity e = resp.getEntity();
        String body = (e == null) ? "" : EntityUtils.toString(e, UTF8);
        EntityUtils.consumeQuietly(e);
        return body;
    }

    private static void assert200(HttpResponse resp) {
        int code = resp.getStatusLine().getStatusCode();
        if (code != 200) throw new RuntimeException("HTTP Status != 200 : " + code);
    }

    // =========================================================================
    // 1) GET : /userAPI/getUser?name=홍길동&age=10
    //    서버 응답: User 객체 JSON => json-simple 로 파싱
    // =========================================================================
    public static void ReqeustHttpGet_UseJsonSimple() throws Exception {
        String name = URLEncoder.encode("홍길동", "UTF-8");
        String url = HOST + "/userAPI/getUser?name=" + name + "&age=10";

        try (CloseableHttpClient client = newClient()) {
            HttpGet get = new HttpGet(url);
            get.setHeader("Accept", "application/json");
            get.setHeader("Content-Type", "application/json; charset=UTF-8");

            HttpResponse resp = client.execute(get);
            assert200(resp);
            String json = readBody(resp);

            System.out.println("[GET/json-simple] raw = " + json);

            JSONParser parser = new JSONParser();
            JSONObject obj = (JSONObject) parser.parse(json);

            System.out.println("[GET/json-simple] userId   = " + obj.get("userId"));
            System.out.println("[GET/json-simple] userName = " + obj.get("userName"));
            System.out.println("[GET/json-simple] age      = " + obj.get("age"));
        }
    }

    // =========================================================================
    // 2) GET : /userAPI/getUserMore/user01?name=홍길동&age=10
    //    서버 응답: {"user": {...User...}, "message": "..."} 등 복합 JSON
    //    => Jackson 1.x 사용 (innerjson의 "user"를 User로 변환)
    // =========================================================================
    public static void ReqeustHttpGet_UseCodeHaus() throws Exception {
        String name = URLEncoder.encode("홍길동", "UTF-8");
        String url = HOST + "/userAPI/getUserMore/user01?name=" + name + "&age=10";

        try (CloseableHttpClient client = newClient()) {
            HttpGet get = new HttpGet(url);
            get.setHeader("Accept", "application/json");
            get.setHeader("Content-Type", "application/json; charset=UTF-8");

            HttpResponse resp = client.execute(get);
            assert200(resp);
            String json = readBody(resp);

            System.out.println("[GET/Jackson] raw = " + json);

            ObjectMapper mapper = new ObjectMapper();
            Map<String, Object> top = mapper.readValue(json, new TypeReference<Map<String, Object>>() {});
            User user = mapper.convertValue(top.get("user"), User.class);

            System.out.println("[GET/Jackson] message = " + top.get("message"));
            System.out.println("[GET/Jackson] user    = " + user);
        }
    }

    // =========================================================================
    // 3) POST : /userAPI/getUser
    //    Body: {"userId":"test","userName":"홍길동"}
    //    서버 응답: User 객체 JSON => json-simple 로 파싱
    // =========================================================================
    public static void ReqeustHttpPostData_UseJsonSimple() throws Exception {
        String url = HOST + "/userAPI/getUser";

        JSONObject send = new JSONObject();
        send.put("userId", "test");
        send.put("userName", "홍길동");

        try (CloseableHttpClient client = newClient()) {
            HttpPost post = new HttpPost(url);
            post.setHeader("Accept", "application/json");
            post.setHeader("Content-Type", "application/json; charset=UTF-8");
            post.setEntity(new StringEntity(send.toJSONString(), UTF8));

            HttpResponse resp = client.execute(post);
            assert200(resp);
            String json = readBody(resp);

            System.out.println("[POST/json-simple] raw = " + json);

            JSONParser parser = new JSONParser();
            JSONObject obj = (JSONObject) parser.parse(json);

            System.out.println("[POST/json-simple] userId   = " + obj.get("userId"));
            System.out.println("[POST/json-simple] userName = " + obj.get("userName"));
        }
    }

    // =========================================================================
    // 4) POST : /userAPI/getUserMore/user01
    //    Body: {"userId":"test","userName":"홍길동"}
    //    서버 응답: {"user": {...User...}, "message":"ok"} => Jackson 1.x
    // =========================================================================
    public static void ReqeustHttpPostData_UseCodeHaus() throws Exception {
        String url = HOST + "/userAPI/getUserMore/user01";
        String body = "{\"userId\":\"test\",\"userName\":\"홍길동\"}";

        try (CloseableHttpClient client = newClient()) {
            HttpPost post = new HttpPost(url);
            post.setHeader("Accept", "application/json");
            post.setHeader("Content-Type", "application/json; charset=UTF-8");
            post.setEntity(new StringEntity(body, UTF8));

            HttpResponse resp = client.execute(post);
            assert200(resp);
            String json = readBody(resp);

            System.out.println("[POST/Jackson] raw = " + json);

            ObjectMapper mapper = new ObjectMapper();
            Map<String, Object> top = mapper.readValue(json, new TypeReference<Map<String, Object>>() {});
            User user = mapper.convertValue(top.get("user"), User.class);

            System.out.println("[POST/Jackson] message = " + top.get("message"));
            System.out.println("[POST/Jackson] user    = " + user);
        }
    }

    // ===================== (선택) 컬렉션 바로 받기 연습 =====================
    // 서버가 List<User>를 직접 응답하는 엔드포인트가 있을 때의 예시
    public static void Example_ReadUserList_Jackson(String url) throws Exception {
        try (CloseableHttpClient client = newClient()) {
            HttpGet get = new HttpGet(url);
            get.setHeader("Accept", "application/json");
            HttpResponse resp = client.execute(get);
            assert200(resp);
            String json = readBody(resp);

            ObjectMapper mapper = new ObjectMapper();
            List<User> list = mapper.readValue(json, new TypeReference<List<User>>() {});
            System.out.println("[GET/Jackson List<User>] size=" + list.size());
            for (User u : list) System.out.println(" - " + u);
        }
    }

    // =============================== main ===============================
    public static void main(String[] args) throws Exception {
        // 주석 하나씩 풀어가며 테스트
//        System.out.println("\n=== 1. GET(json-simple) 단일 User ===");
//        ReqeustHttpGet_UseJsonSimple();
//
//        System.out.println("\n=== 2. GET(Jackson) innerjson user ===");
//        ReqeustHttpGet_UseCodeHaus();
//
//        System.out.println("\n=== 3. POST(json-simple) 단일 User ===");
//        ReqeustHttpPostData_UseJsonSimple();
//
//        System.out.println("\n=== 4. POST(Jackson) innerjson user ===");
//        ReqeustHttpPostData_UseCodeHaus();
    }
}




