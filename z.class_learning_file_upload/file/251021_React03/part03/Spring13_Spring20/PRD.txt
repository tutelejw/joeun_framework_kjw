=================================================
PRD : Product Requirement Document : 제품요구서 작성 : ???
--------------------------------------------------
-- 용어에 익숙해지자 
: 구현요구사항을 AI 에 전달 하는 skill 을 익힘.
: 요구사항을 정확히 지시 : Prompt Detail
: 직접 지시가 아니라 AI 와 협업 
   예> 이렇게 하려면 어떻게 해야해 ? 
         : 난 알고 있지만. AI 가 생각하고 해결 할 수 있도록

: Low-code / Prompt Engineering / Ai-assisted coding
=================================================


##### 
0. UserRestController.java  / User.java

mport java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import spring.domain.User;

@RestController
@RequestMapping("/userAPI/*")
public class UserRestController {
	///Field
	///Constructor
	public UserRestController(){
		System.out.println(":: UserRestController default Contructor call");
	}
	
	
	//1.1 Client 로 Domain Object 만 전송할 경우.
	//요청 미디어타입 : application/json ==> 즉 데이터교환 json 
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUser?name=user02&age=10
	@RequestMapping(value="getUser" , method=RequestMethod.GET )
	public User getUser	(	@RequestParam("name") String name,
												@RequestParam("age") int age) throws Exception{
	
		System.out.println();
		System.out.println(name);
		System.out.println(age);
		
		User returnUser = new User();
		returnUser.setUserId("AAA");
		returnUser.setUserName("GET:이순신");
		returnUser.setAge(100);
		System.out.println(returnUser);
		
		return returnUser;
	}

	// 1.1 Client 로 Domain Object + 기타 Data 를 JSON 으로 전송할 경우.
	//요청 미디어타입 : application/json ==> 즉 데이터교환 json 
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUserMore/user01?name=user02&age=10
	@RequestMapping(value="getUserMore/{value}" , method=RequestMethod.GET )
	public Map<String, Object> getUserMore	(	@PathVariable String value,
														@RequestParam("name") String name,
														@RequestParam("age") int age) throws Exception{
		System.out.println();
		System.out.println(value);
		System.out.println(name);
		System.out.println(age);
		
		User returnUser01 = new User();
		returnUser01.setUserId("AAA");
		returnUser01.setUserName("GET:이순신AAA");
		returnUser01.setAge(100);
		System.out.println(returnUser01);
		
		User returnUser02 = new User();
		returnUser02.setUserId("BBB");
		returnUser02.setUserName("GET:이순신BBB");
		returnUser02.setAge(200);
		System.out.println(returnUser02);
		
		User returnUser03 = new User();
		returnUser03.setUserId("CCC");
		returnUser03.setUserName("GET:이순신CCC");
		returnUser03.setAge(300);
		System.out.println(returnUser03);
		
		List<User> list =  new ArrayList<User>();
		list.add(returnUser01);
		list.add(returnUser02);
		list.add(returnUser03);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("user",list);
		//==> 단순히 name=value 의 Data 를 저장할 경우는 ????
		map.put("message","ok");

		return map;
	}

	// 2.1 Client 로 Domain Object 만 전송할 경우.
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUser
	// @ModelAttribute("user") User user : Client 의 Form Data => User 바인딩. 
	// @RequestBody User user : Client JSON Datga => User 바인딩
	@RequestMapping(value="getUser" , method=RequestMethod.POST )
	public User getUser	( @RequestBody User user ) throws Exception{
		System.out.println();
		System.out.println("[ Client JSON Data ]");
		System.out.println("1 : "+user);
		
		System.out.println("[To Client Data]");
		User returnUser = new User();
		returnUser.setUserId("AAA");
		returnUser.setUserName("POST:이순신");
		System.out.println("2 : "+returnUser);
		
		return returnUser;
	}
	
	
	
	// 2.1 Client 로 Domain Object + 기타 Data 를 JSON 으로 전송할 경우.
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUserMore/user01
	// @ModelAttribute("user") User user : Client 의 Form Data => User 바인딩. 
	// @RequestBody User user : Client JSON Datga => User 바인딩	
	@RequestMapping(value="getUserMore/{value}" , method=RequestMethod.POST )
	public Map<String, Object> getUserMore	(  	@PathVariable String value, 
														@RequestBody User user ) throws Exception{	
		System.out.println();
		System.out.println("[ Client JSON Data ]");
		System.out.println(value);
		System.out.println("1 : "+user);
		
		System.out.println("[To Client Data]");
		User returnUser01 = new User();
		returnUser01.setUserId("AAA");
		returnUser01.setUserName("GET:이순신AAA");
		returnUser01.setAge(100);
		System.out.println(returnUser01);
		
		User returnUser02 = new User();
		returnUser02.setUserId("BBB");
		returnUser02.setUserName("GET:이순신BBB");
		returnUser02.setAge(200);
		System.out.println(returnUser02);
		
		User returnUser03 = new User();
		returnUser03.setUserId("CCC");
		returnUser03.setUserName("GET:이순신CCC");
		returnUser03.setAge(300);
		System.out.println(returnUser03);
		
		List<User> list =  new ArrayList<User>();
		list.add(returnUser01);
		list.add(returnUser02);
		list.add(returnUser03);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("user",list);
		//==> 단순히 name=value 의 Data 를 저장할 경우는 ????
		map.put("message","ok");

		return map;
	}	
}


1. 상기 RestUserController 접근 JSON  아 콘솔에 출력하는
   JavaScript Fuction 구현 : fetch() 사용할 것

1.1 fetchGet01 ()  :  아래 URL Request
   
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUser?name=user02&age=10
	@RequestMapping(value="getUser" , method=RequestMethod.GET )
	public User getUser	(	@RequestParam("name") String name,
												@RequestParam("age") int age) throws Exception{


1.2 fetchGet01 ()  :  아래 URL Request
   
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUserMore/user01?name=user02&age=10
	@RequestMapping(value="getUserMore/{value}" , method=RequestMethod.GET )
	public Map<String, Object> getUserMore	(	@PathVariable String value,
														@RequestParam("name") String name,
														@RequestParam("age") int age) throws Exception{


1.3 fetchPost01 ()  :  아래 URL Request
   
	//http://127.0.0.1:8080/Spring20/app/userAPI/getUser
	@RequestMapping(value="getUser" , method=RequestMethod.POST )
	public User getUser	( @RequestBody User user ) throws Exception{


1.3 fetchPost02 ()  :  아래 URL Request
   
    //http://127.0.0.1:8080/Spring20/app/userAPI/getUserMore/user01
	@RequestMapping(value="getUserMore/{value}" , method=RequestMethod.POST )
	public Map<String, Object> getUserMore	(  	@PathVariable String value, 
														@RequestBody User user ) throws Exception{



From GPT////////////////////////////////////////////////////////////////////////////
// ===============================
// 공통 설정
// ===============================
const BASE = 'http://127.0.0.1:8080/Spring20/app/userAPI';

/** 공통: 응답 처리(에러 → throw) */
async function handleJson(res) {
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(`HTTP ${res.status} ${res.statusText} :: ${text}`);
  }
  return res.json();
}

/** 공통: GET 쿼리스트링 생성 */
function qs(params) {
  const usp = new URLSearchParams(params);
  return `?${usp.toString()}`;
}

// ===============================
// 1) GET : /userAPI/getUser?name=&age=
// ===============================
async function fetchGet01({ name, age }) {
  const url = `${BASE}/getUser${qs({ name, age })}`;
  console.log('[GET] GET /getUser 호출:', url);

  const res = await fetch(url, {
    method: 'GET',
    headers: { 'Accept': 'application/json' },
  });
  const data = await handleJson(res);

  console.log('[GET] 응답(JSON) ↓');
  console.log(data);          // { userId, userName, age, ... }
  return data;
}

// ===============================
// 2) GET : /userAPI/getUserMore/{value}?name=&age=
// ===============================
async function fetchGet02({ value, name, age }) {
  const url = `${BASE}/getUserMore/${encodeURIComponent(value)}${qs({ name, age })}`;
  console.log('[GET] GET /getUserMore/{value} 호출:', url);

  const res = await fetch(url, {
    method: 'GET',
    headers: { 'Accept': 'application/json' },
  });
  const data = await handleJson(res);

  console.log('[GET] 응답(JSON) ↓');
  console.log(data);          // { user: [User, ...], message: 'ok' }
  return data;
}

// ===============================
// 3) POST : /userAPI/getUser   (Body: JSON -> User)
// ===============================
async function fetchPost01(user) {
  const url = `${BASE}/getUser`;
  console.log('[POST] POST /getUser 호출:', url);
  console.log('[POST] 전송(JSON) ↓');
  console.log(user);

  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',  // JSON 전송
    },
    body: JSON.stringify(user),
  });
  const data = await handleJson(res);

  console.log('[POST] 응답(JSON) ↓');
  console.log(data);          // { userId:"AAA", userName:"POST:이순신", ... }
  return data;
}

// ===============================
// 4) POST : /userAPI/getUserMore/{value}  (Path + Body JSON)
// ===============================
async function fetchPost02(value, user) {
  const url = `${BASE}/getUserMore/${encodeURIComponent(value)}`;
  console.log('[POST] POST /getUserMore/{value} 호출:', url);
  console.log('[POST] 전송(JSON) ↓');
  console.log(user);

  const res = await fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(user),
  });
  const data = await handleJson(res);

  console.log('[POST] 응답(JSON) ↓');
  console.log(data);          // { user: [User, ...], message: 'ok' }
  return data;
}

// ===============================
// 사용 예시 (필요 시 호출)
// ===============================
// (1) GET /getUser
// fetchGet01({ name: 'user02', age: 10 });

// (2) GET /getUserMore/{value}
// fetchGet02({ value: 'user01', name: 'user02', age: 10 });

// (3) POST /getUser
// fetchPost01({ userId: 'U001', userName: '홍길동', age: 20 });

// (4) POST /getUserMore/{value}
// fetchPost02('user01', { userId: 'U002', userName: '임꺽정', age: 30 });

////////////////////////////////////////////////////////////////////////////
