=================================================
PRD : Product Requirement Document : 제품요구서 작성 : ???
--------------------------------------------------
-- 용어에 익숙해지자 
: 구현요구사항을 AI 에 전달 하는 skill 을 익힘.
: 요구사항을 정확히 지시 : Prompt Detail
: 직접 지시가 아니라 AI 와 협업 
   예> 이렇게 하려면 어떻게 해야해 ? 
         : 난 알고 있지만. AI 가 생각하고 해결 할 수 있도록

: Low-code / Prompt Engineering / Ai-assisted coding
=================================================


##### LogonCheckInterceptor 

0. 로그인 상태 유지 및 확인은.

package spring.domain;

import java.io.Serializable;

public class  User implements Serializable{
	
	///Field
	private String userId;
	private String password;
	private boolean active;

  //==> get/set 생략
}//end of class

0.1 로그인시 User 인스턴스를 active= true 로 sessionUser 이름으로 session 에  저장
0.2 로그인 유무는 session 의 sessionUser 인스턴스유무 및 active true 로 판단
0.2 로그아웃시 sessionUser 를 session 에서 remove 함.



1. LogonCheckInterceptor  구현

1.1 url 이 logon.do 일때.
- 로그인한 유저는 /user02/home.jsp 로 포워드
- 미 로그인한 유저는 컨트롤러로...

1.2 url 이 home.do 일때.
- 로그인한 유저는 컨드롤러로..
- 미 로그인한 유저는 /user02/logon.jsp 로 포워드

1.3 url 이 logonAction.do 일때.
- 로그인한 유저는 /user02/home.jsp 로 포워드
- 미 로그인한 유저는컨드롤러로...

1.4 url 이 logout.do 일때.
- 로그인한 유저는 컨드롤러로...
- 미 로그인한 유저는 /user02/logon.jsp 로 포워드





#####
package spring.web.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import spring.domain.User;

public class LogonCheckInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

        HttpSession session = request.getSession(false); // 세션 없으면 null
        User sessionUser = (session != null) ? (User) session.getAttribute("sessionUser") : null;
        boolean isLogin = (sessionUser != null && sessionUser.isActive());

        String uri = request.getRequestURI();
        // contextPath가 붙을 수 있으니, 마지막 경로만 추출
        String url = uri.substring(uri.lastIndexOf("/") + 1);

        // 1.1 /logon.do
        if (url.equals("logon.do")) {
            if (isLogin) {
                // 로그인 O → home.jsp로 forward
                request.getRequestDispatcher("/user02/home.jsp").forward(request, response);
                return false;
            }
            // 로그인 X → 컨트롤러로 진행
            return true;
        }

        // 1.2 /home.do
        if (url.equals("home.do")) {
            if (!isLogin) {
                // 로그인 X → logon.jsp로 forward
                request.getRequestDispatcher("/user02/logon.jsp").forward(request, response);
                return false;
            }
            // 로그인 O → 컨트롤러로 진행
            return true;
        }

        // 1.3 /logonAction.do
        if (url.equals("logonAction.do")) {
            if (isLogin) {
                // 로그인 O → home.jsp로 forward
                request.getRequestDispatcher("/user02/home.jsp").forward(request, response);
                return false;
            }
            // 로그인 X → 컨트롤러로 진행
            return true;
        }

        // 1.4 /logout.do
        if (url.equals("logout.do")) {
            if (!isLogin) {
                // 로그인 X → logon.jsp로 forward
                request.getRequestDispatcher("/user02/logon.jsp").forward(request, response);
                return false;
            }
            // 로그인 O → 컨트롤러로 진행
            return true;
        }

        // 그 외 URL은 모두 컨트롤러로
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest req, HttpServletResponse res, Object handler, ModelAndView mv) throws Exception {}
    @Override
    public void afterCompletion(HttpServletRequest req, HttpServletResponse res, Object handler, Exception ex) throws Exception {}
}
