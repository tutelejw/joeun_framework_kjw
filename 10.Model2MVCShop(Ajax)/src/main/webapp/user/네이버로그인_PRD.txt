자바 웹앱으로 개발 중이야.
톰캣 jsp로 스크핑 프레임워크에 mybatis 프로임워크 구성이야.
네이버 로그인을 통한 인증을 구현하고 싶어.
아래의 web.xml loginView.jsp 를 참고해서 loginView.jsp 에 수정사항과 서블릿에 수정사항을 가이드 해줘
컨트롤러 를 보고 추가 메소드 확인해줘.
import 필요 사항 추가해줘 .*처리 하지말고 각각 명시해줘. 다운로드필요사항도 제시해줘
jsp 파일에서 console.log로 디버깅을 해주고 java 서블릿에서 인입과 주고받는 데이터를 디버깅 해서 로그 추가해줘

사이트 도메인: http://localhost:8080
Redirect URI  : http://localhost:8080/user/naverLogin
redirectUri 는 동적으로 127.0.0.1, localhost, 192.168.0.* 에 대응할수 있게 적용해줘 
SDK를 다운받지 않고 연동하게 적용
네이버 로그인시 팝업 통신 (부모창 <-> 팝업창) 적용 오류 생기지 않게 더 확실하게 확인해줘
메이븐은 사용하지 않아.

<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
  version="4.0"
  metadata-complete="true">
	
	<!--	:: ContextLoaderListener 을 이용한 Business logic  Meta-Data 등록   -->		
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener	</listener-class>
	</listener>		
	 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:config/context-aspect.xml,
			classpath:config/context-common.xml,
			classpath:config/context-mybatis.xml,
			classpath:config/context-transaction.xml
		</param-value>
	</context-param>
		
	<!-- :: Spring API 에 제공하는 CharacterEncodingFilter 로 한글 인코딩처리 -->	
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>	org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>	

 	 <!-- ::SpringMVC 에서의 Front Controller(단일인입점)  DispatcherServlet 선언 -->
	  <servlet>
		    <servlet-name>action</servlet-name>
		    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		    
		    <init-param>
		      <param-name>contextConfigLocation</param-name>
		      <param-value>/config/springMVC/common-servlet.xml</param-value>
		      <!-- Servlet Meta-data / Spring Meta-data 위치 분리함 -->
		    </init-param>
		    
		    <load-on-startup>1</load-on-startup>
  </servlet>
  
	<!-- 	URI : / 형식  Servlet Mapping -->
	<servlet-mapping>
	  <servlet-name>action</servlet-name>
	  <url-pattern>/</url-pattern>
	</servlet-mapping>
	  
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file> 
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
    </welcome-file-list>
    	
</web-app>








============= top.jsp
<%@ page contentType="text/html; charset=UTF-8" %>
<%@ page pageEncoding="UTF-8" %>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Model2 MVC Shop</title>
	<link href="/css/left.css" rel="stylesheet" type="text/css">
	
	<script src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
	
    <script src="https://t1.kakaocdn.net/kakao_js_sdk/2.7.6/kakao.min.js" integrity="sha384-WAtVcQYcmTO/N+C1N+1m6Gp8qxh+3NlnP7X1U7qP6P5dQY/MsRBNTh+e1ahJrkEm" crossorigin="anonymous"></script>

	<script type="text/javascript">
		// 페이지 로드 시 카카오 SDK 초기화
		$(function() {
			// 본인의 JavaScript 키를 입력하세요.
			Kakao.init('8cff1ee0835498e88c05badb308f0dbd'); 
		});
	
		$(function() {
			//==> login Event 연결처리부분
		 	$("td[width='115']:contains('login')").on("click" , function() {
				$(window.parent.frames["rightFrame"].document.location).attr("href","/user/login");
			});
			
			// ▼▼▼ 2. 로그아웃 Event 핸들러 수정 ▼▼▼
			$("td[width='56']:contains('logout')").on("click" , function() {
				// 카카오 SDK가 초기화되었는지 확인
				if (Kakao.isInitialized()) {
					Kakao.Auth.logout()
						.then(function () {
							// 카카오 로그아웃 성공 시 우리 서버 로그아웃 실행
							console.log('카카오계정 로그아웃 성공');
							window.parent.location.href = '/user/logout';
						})
						.catch(function () {
							// 카카오 로그아웃 실패하더라도 우리 서버 로그아웃은 실행
							console.log('카카오계정 로그아웃 실패');
							window.parent.location.href = '/user/logout';
						});
				} else {
					// SDK 초기화 전이면 그냥 우리 서버 로그아웃만 실행
					window.parent.location.href = '/user/logout';
				}
			}); 
		});	
	</script>		
</head>
<body topmargin="0" leftmargin="0">
	<table width="100%" height="50" border="0" cellpadding="0" cellspacing="0">
	  <tr>
		<td height="10"></td>
		<td height="10" >&nbsp;</td>
	  </tr>
	  <tr>
	    <td width="800" height="30"><h2>Model2 MVC Shop</h2></td>
	  </tr>
	  <tr>
	    <td height="20" align="right" background="/images/img_bg.gif">
		    <table width="200" border="0" cellspacing="0" cellpadding="0">
		        <tr> 
		          <td width="115" style="cursor:pointer;">
			          <c:if test="${ empty user }">login</c:if>   
		          </td>
		          <td width="14">&nbsp;</td>
		          <td width="56" style="cursor:pointer;">
			          <c:if test="${ ! empty user }">logout </c:if>
		          </td>
		        </tr>
		      </table>
	      </td>
	    <td height="20" background="/images/img_bg.gif">&nbsp;</td>
	  </tr>
	</table>
</body>
</html>







===========loginView.jsp
<%@ page contentType="text/html; charset=UTF-8" %>
<%@ page pageEncoding="UTF-8" %>

<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	
	<title>로그인 화면</title>
	
	<link rel="stylesheet" href="/css/admin.css" type="text/css">
	
	<script src="http://code.jquery.com/jquery-2.1.4.min.js"></script>
    
    <script src="https://t1.kakaocdn.net/kakao_js_sdk/2.7.6/kakao.min.js" integrity="sha384-WAtVcQYcmTO/N+C1N+1m6Gp8qxh+3NlnP7X1U7qP6P5dQY/MsRBNTh+e1ahJrkEm" crossorigin="anonymous"></script>
    <script type="text/javascript">
        // 페이지 로드 시 카카오 SDK 초기화
        $(function() {
            // 본인의 JavaScript 키를 입력하세요.
            Kakao.init('8cff1ee0835498e88c05badb308f0dbd'); 
            console.log('Kakao SDK Initalized:', Kakao.isInitialized());
        });

		$( function() {
			
			//==> DOM Object GET 3가지 방법 ==> 1. $(tagName) : 2.(#id) : 3.$(.className)
			$("#userId").focus();
			
			//==>"Login"  Event 연결
			$("img[src='/images/btn_login.gif']").on("click" , function() {

				var id=$("input:text").val();
				var pw=$("input:password").val();
				
				if(id == null || id.length <1) {
					alert('ID 를 입력하지 않으셨습니다.');
					$("input:text").focus();
					return;
				}
				
				if(pw == null || pw.length <1) {
					alert('패스워드를 입력하지 않으셨습니다.');
					$("input:password").focus();
					return;
				}
				
				$.ajax( 
						{
							url : "/user/json/login",
							method : "POST" ,
							dataType : "json" ,
							headers : {
								"Accept" : "application/json",
								"Content-Type" : "application/json"
							},
							data : JSON.stringify({
								userId : id,
								password : pw
							}),
							success : function(JSONData , status) {
								if( JSONData != null ){
									// 부모창(index.jsp)의 프레임들을 새로고침
									$(window.parent.frames["topFrame"].document.location).attr("href","/layout/top.jsp");
									$(window.parent.frames["leftFrame"].document.location).attr("href","/layout/left.jsp");
									$(window.parent.frames["rightFrame"].document.location).attr("href","/user/getUser?userId="+JSONData.userId);
								}else{
									alert("아이디 , 패스워드를 확인하시고 다시 로그인...");
								}
							}
					}); 
			});

            // ============= 카카오 로그인 버튼 Event 연결 =============
			$("#kakaoLoginBtn").on("click", function() {
			    kakaoLoginPopup(); // 함수 이름 변경
			});
            
            // ============= [신규] 구글 로그인 버튼 Event 연결 =============
            $("#googleLoginBtn").on("click", function() {
                googleLoginPopup();
            });
            
		});
		
		
		//============= 회원원가입화면이동 =============
		$( function() {
			//==> 추가된부분 : "addUser"  Event 연결
			$("img[src='/images/btn_add.gif']").on("click" , function() {
				self.location = "/user/addUser"
			});
		});


        // ============= 카카오 로그인 처리 함수 =============

        function kakaoLogin() {
            // Kakao.isInitialized()를 통해 SDK 초기화 여부를 한번 더 확인합니다.
            if (!Kakao.isInitialized()) {
                alert('카카오 SDK가 초기화되지 않았습니다.');
                return;
            }

            // ★★★ 디버깅 코드 추가 ★★★  // Kakao.Auth 객체를 콘솔에 출력해봅니다.
            console.log('Inspecting Kakao.Auth object:', Kakao.Auth); 
            
            // 에러가 나는 라인
            Kakao.Auth.login({
                success: function (authObj) {
                },
                fail: function (err) {
                },
            });
        }
        
        // ============= [신규] 구글 로그인 팝업 처리 함수 =============
        function googleLoginPopup() {
            // 1. Google Cloud Console에서 발급받은 클라이언트 ID
            const GOOGLE_CLIENT_ID = "1095911084251-9vedhnalqe4lhkmpakr4t1h7vqe5ld5e.apps.googleusercontent.com"; // ◀◀◀ 여기에 발급받은 클라이언트 ID를 입력하세요.

            // 2. 서버에 설정된 Redirect URI (절대 경로)
            const GOOGLE_REDIRECT_URI = "http://localhost:8080/user/googleLogin";

            // 3. 사용자 정보 범위를 지정 (기본: email, profile)
            const GOOGLE_SCOPE = "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile";

            // 4. OAuth 2.0 인증 URL 생성
            const authUrl = 'https://accounts.google.com/o/oauth2/v2/auth'
                        + '?client_id=' + GOOGLE_CLIENT_ID
                        + '&redirect_uri=' + GOOGLE_REDIRECT_URI
                        + '&response_type=code'
                        + '&scope=' + encodeURIComponent(GOOGLE_SCOPE);

            // [디버깅] 생성된 인증 URL을 콘솔에 출력
            console.log('Generated Google Auth URL:', authUrl);

            // 5. 팝업 창 열기
            window.open(authUrl, 'googleLoginPopup', 'width=600,height=700');
        }

        // ============= [신규] 팝업 창에서 호출할 콜백 함수 =============
        // 이 함수는 팝업(googleCallback.jsp)에서 로그인이 성공했을 때 호출합니다.
        function googleLoginCallback(userId) {
            console.log("googleLoginCallback called with userId:", userId);
            // 부모창(index.jsp)의 프레임들을 새로고침
            $(window.parent.frames["topFrame"].document.location).attr("href","/layout/top.jsp");
            $(window.parent.frames["leftFrame"].document.location).attr("href","/layout/left.jsp");
            $(window.parent.frames["rightFrame"].document.location).attr("href","/user/getUser?userId="+userId);
        }


     // [변경] 카카오 로그인 팝업을 수동으로 띄우는 함수
function kakaoLoginPopup() {
    const KAKAO_REST_API_KEY = 'f38379dc4a1fd8db1c81e44d5bf62547'; // 본인의 REST API 키
    
    // 현재 접속한 주소(origin)를 기반으로 Redirect URI를 동적으로 생성합니다.
    const KAKAO_REDIRECT_URI = window.location.origin + '/user/kakaoLogin';

    const authUrl = 'https://kauth.kakao.com/oauth/authorize?response_type=code'
                  + '&client_id=' + KAKAO_REST_API_KEY 
                  + '&redirect_uri=' + KAKAO_REDIRECT_URI;

    console.log('Generated Kakao Auth URL:', authUrl); // 생성된 URL 확인
    
    window.open(authUrl, 'kakaoLoginPopup', 'width=600,height=700');
}
	</script>		
	
</head>

<body bgcolor="#ffffff" text="#000000" >

<form onsubmit="return false;">

<div align="center" >

<TABLE WITH="100%" HEIGHT="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD ALIGN="CENTER" VALIGN="MIDDLE">

<table width="650" height="390" border="5" cellpadding="0" cellspacing="0" bordercolor="#D6CDB7">
  <tr> 
    <td width="10" height="5" align="left" valign="top" bordercolor="#D6CDB7">
    	<table width="650" height="390" border="0" cellpadding="0" cellspacing="0">
        <tr>
          <td width="305">
            <img src="/images/logo-spring.png" width="305" height="390"/>
          </td>
          <td width="345" align="left" valign="top">
          	<table width="100%" height="220" border="0" cellpadding="0" cellspacing="0">
              <tr> 
                <td width="30" height="100">&nbsp;</td>
                <td width="100" height="100">&nbsp;</td>
                <td height="100">&nbsp;</td>
                <td width="20" height="100">&nbsp;</td>
              </tr>
              <tr> 
                <td width="30" height="50">&nbsp;</td>
                <td width="100" height="50">                	<img src="/images/text_login.gif" width="91" height="32"/>                </td>
                <td height="50">&nbsp;</td>
                <td width="20" height="50">&nbsp;</td>
              </tr>
              <tr>                 <td width="200" height="50" colspan="4"></td>              </tr>              
              <tr> 
                <td width="30" height="30">&nbsp;</td>
                <td width="100" height="30">
                	<img src="/images/text_id.gif" width="100" height="30"/>
                </td>
                <td height="30">
                  <input 	type="text" name="userId"  id="userId"  class="ct_input_g" 
                  				style="width:180px; height:19px"  maxLength='50'/>          
          		</td>
                <td width="20" height="30">&nbsp;</td>
              </tr>
              <tr> 
                <td width="30" height="30">&nbsp;</td>
                <td width="100" height="30">
                	<img src="/images/text_pas.gif" width="100" height="30"/>
                </td>
                <td height="30">                    
                    <input 	type="password" name="password" class="ct_input_g" 
                    				style="width:180px; height:19px"  maxLength="50" />
                </td>
                <td width="20" height="30">&nbsp;</td>
              </tr>
              <tr> 
                <td width="30" height="20">&nbsp;</td>
                <td width="100" height="20">&nbsp;</td>
                <td height="20" align="center">
   				    <table width="136" height="20" border="0" cellpadding="0" cellspacing="0">
                       <tr> 
                         <td width="56">
                         		<img src="/images/btn_login.gif" width="56" height="20" border="0" style="cursor:pointer;"/>
                         </td>
                         <td width="10">&nbsp;</td>
                         <td width="70">
                       			<img src="/images/btn_add.gif" width="70" height="20" border="0" style="cursor:pointer;">
                         </td>
                       </tr>
                     </table>
                 </td>
                 <td width="20" height="20">&nbsp;</td>
              </tr>
              <tr>
                <td colspan="4" align="center" style="padding-top:10px;">
                    <img id="kakaoLoginBtn" src="/images/kakao_login_medium_narrow.jpg" style="cursor:pointer;"/>
                </td>
              </tr>
              <tr>
                <td colspan="4" align="center" style="padding-top:5px;">
                    <img id="googleLoginBtn" src="/images/btn_google_signin_light_normal_web.png" style="cursor:pointer; height: 45px;"/>
                    <!-- https://developers.google.com/identity/branding-guidelines -->
                </td>
              </tr>
            </table>
            </td>
      	</tr>                            
      </table>
      </td>
  </tr>
</table>
</TD>
</TR>
</TABLE>

</div>

</form>

</body>
</html>









package com.model2.mvc.web.user;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.model2.mvc.common.Page;
import com.model2.mvc.common.Search;
import com.model2.mvc.service.domain.User;
import com.model2.mvc.service.user.UserService;


//==> 회원관리 Controller
@Controller
@RequestMapping("/user/*")
public class UserController {
	
	///Field
	@Autowired
	@Qualifier("userServiceImpl")
	private UserService userService;
	//setter Method 구현 않음
		
	public UserController(){
		System.out.println(this.getClass());
	}
	
	@Value("#{commonProperties['pageUnit']}")
	int pageUnit;
	@Value("#{commonProperties['pageSize']}")
	int pageSize;
	
	
	@RequestMapping( value="addUser", method=RequestMethod.GET )
	public String addUser() throws Exception{
	
		System.out.println("/user/addUser : GET");
		
		return "redirect:/user/addUserView.jsp";
	}
	
	@RequestMapping( value="addUser", method=RequestMethod.POST )
	public String addUser( @ModelAttribute("user") User user ) throws Exception {

		System.out.println("/user/addUser : POST");
		//Business Logic
		userService.addUser(user);
		
		return "redirect:/user/loginView.jsp";
	}
	

	@RequestMapping( value="getUser", method=RequestMethod.GET )
	public String getUser( @RequestParam("userId") String userId , Model model ) throws Exception {
		
		System.out.println("/user/getUser : GET");
		//Business Logic
		User user = userService.getUser(userId);
		// Model 과 View 연결
		model.addAttribute("user", user);
		
		return "forward:/user/getUser.jsp";
	}
	

	@RequestMapping( value="updateUser", method=RequestMethod.GET )
	public String updateUser( @RequestParam("userId") String userId , Model model ) throws Exception{

		System.out.println("/user/updateUser : GET");
		//Business Logic
		User user = userService.getUser(userId);
		// Model 과 View 연결
		model.addAttribute("user", user);
		
		return "forward:/user/updateUser.jsp";
	}

	@RequestMapping( value="updateUser", method=RequestMethod.POST )
	public String updateUser( @ModelAttribute("user") User user , Model model , HttpSession session) throws Exception{

		System.out.println("/user/updateUser : POST");
		//Business Logic
		userService.updateUser(user);
		
		String sessionId=((User)session.getAttribute("user")).getUserId();
		if(sessionId.equals(user.getUserId())){
			session.setAttribute("user", user);
		}
		
		return "redirect:/user/getUser?userId="+user.getUserId();
	}
	
	
	@RequestMapping( value="login", method=RequestMethod.GET )
	public String login() throws Exception{
		
		System.out.println("/user/logon : GET");

		return "redirect:/user/loginView.jsp";
	}
	
	@RequestMapping( value="login", method=RequestMethod.POST )
	public String login(@ModelAttribute("user") User user , HttpSession session ) throws Exception{
		
		System.out.println("/user/login : POST");
		//Business Logic
		User dbUser=userService.getUser(user.getUserId());
		
		if( user.getPassword().equals(dbUser.getPassword())){
			session.setAttribute("user", dbUser);
		}
		
		return "redirect:/index.jsp";
	}
		
	
	@RequestMapping( value="logout", method=RequestMethod.GET )
	public String logout(HttpSession session ) throws Exception{
		
		System.out.println("/user/logout : POST");
		session.invalidate();
		return "redirect:/index.jsp";
	}
	
	
	@RequestMapping( value="checkDuplication", method=RequestMethod.POST )
	public String checkDuplication( @RequestParam("userId") String userId , Model model ) throws Exception{
		
		System.out.println("/user/checkDuplication : POST");
		//Business Logic
		boolean result=userService.checkDuplication(userId);
		// Model 과 View 연결
		model.addAttribute("result", new Boolean(result));
		model.addAttribute("userId", userId);

		return "forward:/user/checkDuplication.jsp";
	}

	
	@RequestMapping( value="listUser" )
	public String listUser( @ModelAttribute("search") Search search , Model model , HttpServletRequest request) throws Exception{
		
		System.out.println("/user/listUser : GET / POST");
		
		if(search.getCurrentPage() ==0 ){
			search.setCurrentPage(1);
		}
		search.setPageSize(pageSize);
		
		// Business logic 수행
		Map<String , Object> map=userService.getUserList(search);
		
		Page resultPage = new Page( search.getCurrentPage(), ((Integer)map.get("totalCount")).intValue(), pageUnit, pageSize);
		System.out.println(resultPage);
		
		// Model 과 View 연결
		model.addAttribute("list", map.get("list"));
		model.addAttribute("resultPage", resultPage);
		model.addAttribute("search", search);
		
		return "forward:/user/listUser.jsp";
	}
	
	// [디버깅 로그 추가] 카카오 로그인 콜백 처리
	@RequestMapping(value="kakaoLogin", method=RequestMethod.GET)
		public String kakaoLogin(@RequestParam("code") String code, HttpSession session, HttpServletRequest request  // HttpServletRequest 파라미터 추가 요청받은 URL을 기반으로 동적 Redirect URI 생성
				) throws Exception { 
	    System.out.println("============== KAKAO LOGIN START ==============");
        // ▼▼▼ [추가] 요청받은 URL을 기반으로 동적 Redirect URI 생성 ▼▼▼
        String requestURL = request.getRequestURL().toString(); // 예: "http://127.0.0.1:8080/user/kakaoLogin"
        System.out.println("요청받은 전체 URL: " + requestURL);
	    System.out.println("1. /user/kakaoLogin GET 요청 받음");

	    if (code == null || code.trim().isEmpty()) {
	        System.out.println("[ERROR] 인가 코드가 비어있습니다.");
	        // [수정된 부분] ViewResolver를 거치지 않고 JSP 파일로 직접 포워딩
	        return "forward:/user/kakaoCallback.jsp";
	    }
	    System.out.println("2. 인가 코드 확인 완료: " + code);

	    // 1. 인가 코드로 Access Token 받기
	    // ▼▼▼ [오류 발생 지점 수정] ▼▼▼
	    // 생성한 동적 requestURL을 두 번째 파라미터로 전달해야 합니다.
	    String accessToken = getKakaoAccessToken(code, requestURL); 
	    // ▲▲▲ [수정 완료] ▲▲▲
	    
	    if (accessToken == null) {
	        System.out.println("[ERROR] Access Token 받기 실패");
	        // [수정된 부분] ViewResolver를 거치지 않고 JSP 파일로 직접 포워딩
	        return "forward:/user/kakaoCallback.jsp";
	    }
	    System.out.println("3. Access Token 받기 성공: " + accessToken);

	    // 2. Access Token으로 카카오 사용자 정보 받기
	    Map<String, Object> kakaoUserInfo = getKakaoUserInfo(accessToken);

	    if (kakaoUserInfo == null) {
	        System.out.println("[ERROR] 카카오 사용자 정보 받기 실패");
	        // [수정된 부분] ViewResolver를 거치지 않고 JSP 파일로 직접 포워딩
	        return "forward:/user/kakaoCallback.jsp";
	    }
	    System.out.println("4. 카카오 사용자 정보 받기 성공: " + kakaoUserInfo);

	    // 3. 카카오 ID로 회원 정보 확인 및 처리
	    String kakaoId = String.valueOf(kakaoUserInfo.get("id"));
	    User user = userService.getUser(kakaoId);

	    // 비회원일 경우 자동 회원가입
	    if (user == null) {
	        System.out.println("5. 비회원 확인. 자동 회원가입을 시작합니다.");
	        user = new User();
	        user.setUserId(kakaoId);
	        Map<String, Object> kakaoAccount = (Map<String, Object>) kakaoUserInfo.get("kakao_account");
	        Map<String, Object> profile = (Map<String, Object>) kakaoAccount.get("profile");
	        user.setUserName((String) profile.get("nickname"));
	        if (kakaoAccount.get("email") != null) {
	            user.setEmail((String) kakaoAccount.get("email"));
	        }
	        user.setPassword(kakaoId); // 비밀번호는 고유 ID로 임시 저장
	        user.setRole("user");
	        userService.addUser(user);
	        System.out.println("6. 신규 회원가입 완료: " + user);
	    } else {
	        System.out.println("5. 기존 회원 확인: " + user.getUserId());
	    }

	    // 4. 세션에 로그인 정보 저장
	    session.setAttribute("user", user);
	    User sessionUser = (User) session.getAttribute("user");
	    if (sessionUser != null && sessionUser.getUserId().equals(kakaoId)) {
	        System.out.println("7. 세션 저장 성공! User ID: " + sessionUser.getUserId());
	    } else {
	        System.out.println("[ERROR] 세션 저장 실패!");
	    }
	    System.out.println("============== KAKAO LOGIN END ==============");
	    
	    // [수정] 5. 성공 상태를 전달하며 kakaoCallback.jsp로 포워딩
	    System.out.println("return forward:/user/kakaoCallback.jsp?login=success");	    
	    return "redirect:/user/kakaoCallback.jsp?login=success";
	}

    // [신규 추가] 인가 코드로 Access Token을 요청하는 메소드
    	private String getKakaoAccessToken(String code
    			, String redirectURI    // redirectURI 파라미터 추가
    			) throws Exception {
        String requestURL = "https://kauth.kakao.com/oauth/token";
        URL url = new URL(requestURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        // POST 요청 본문 작성
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
        StringBuilder sb = new StringBuilder();
        sb.append("grant_type=authorization_code");
        sb.append("&client_id=f38379dc4a1fd8db1c81e44d5bf62547"); // REST API 키
        // ▼▼▼ [수정] 하드코딩된 주소 대신 파라미터로 받은 redirectURI 사용 ▼▼▼
        sb.append("&redirect_uri=" + redirectURI);
        sb.append("&code=" + code);
        bw.write(sb.toString());
        bw.flush();

        if (conn.getResponseCode() == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            StringBuilder result = new StringBuilder();
            while ((line = br.readLine()) != null) {
                result.append(line);
            }
            br.close();
            bw.close();

            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> jsonMap = objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
            
            return (String) jsonMap.get("access_token");
        }
        return null;
    }
    
    // [신규 추가] Access Token으로 사용자 정보를 요청하는 메소드 (UserRestController의 것과 동일)
    private Map<String, Object> getKakaoUserInfo(String accessToken) throws Exception {
        String requestURL = "https://kapi.kakao.com/v2/user/me";
        URL url = new URL(requestURL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        conn.setRequestProperty("Authorization", "Bearer " + accessToken);

        if (conn.getResponseCode() == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = "";
            StringBuilder result = new StringBuilder();
            while ((line = br.readLine()) != null) {
                result.append(line);
            }
            br.close();
            
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
        }
        return null;
    }
    
  
    // ============= [신규] 구글 로그인 콜백 처리 메소드 추가 =============
    @RequestMapping(value="googleLogin", method=RequestMethod.GET)
    public String googleLogin(@RequestParam("code") String code, HttpSession session, Model model) throws Exception {

        System.out.println("============== GOOGLE LOGIN START ==============");
        System.out.println("1. /user/googleLogin GET 요청 받음 (Callback)");
        System.out.println("2. 인가 코드(Authorization Code) 확인: " + code);

        // 3. 인가 코드를 사용하여 Access Token 요청
        String accessToken = getGoogleAccessToken(code);
        if (accessToken == null) {
            System.out.println("[ERROR] Access Token 받기 실패");
            model.addAttribute("loginSuccess", false);
            return "forward:/user/googleCallback.jsp";
        }
        System.out.println("3. Access Token 받기 성공: " + accessToken);

        // 4. Access Token으로 구글 사용자 정보 요청
        Map<String, Object> googleUserInfo = getGoogleUserInfo(accessToken);
        if (googleUserInfo == null) {
            System.out.println("[ERROR] 구글 사용자 정보 받기 실패");
            model.addAttribute("loginSuccess", false);
            return "forward:/user/googleCallback.jsp";
        }
        System.out.println("4. 구글 사용자 정보 받기 성공: " + googleUserInfo);

        // 5. 구글 사용자 정보 기반으로 회원 정보 확인 및 처리
        String googleId = (String) googleUserInfo.get("id");
        String email = (String) googleUserInfo.get("email");
        String userName = (String) googleUserInfo.get("name");
        String userId = "g_" + googleId;

        System.out.println("[DEBUG] Google User Info (sub): " + googleId + email+ userName);

        User user = userService.getUser(userId);

        // 비회원일 경우 자동 회원가입
        if (user == null) {
            System.out.println("5. 비회원 확인. 자동 회원가입을 시작합니다.");
            user = new User();
            user.setUserId(userId);
            user.setUserName(userName);
            user.setEmail(email);
            user.setPassword(googleId); // googleId를 임시 비밀번호로 저장
            user.setRole("user"); // 기본 역할 부여

            // ▼▼▼ [DEBUG] DB 저장 직전 User 객체 상태 확인 로그 추가 ▼▼▼
            System.out.println("[DEBUG] New User object to be saved: " + user);

            userService.addUser(user);
            System.out.println("6. 신규 회원가입 완료.");
        } else {
            System.out.println("5. 기존 회원 확인: " + user.getUserId());
        }

        // 7. 세션에 로그인 정보 저장
        session.setAttribute("user", user);
        model.addAttribute("loginSuccess", true);
        model.addAttribute("userId", user.getUserId());

        System.out.println("8. 세션 저장 완료. User ID: " + user.getUserId());
        System.out.println("============== GOOGLE LOGIN END ==============");

        // 9. 팝업을 제어할 JSP로 포워딩
        return "forward:/user/googleCallback.jsp";
    }

	private String getGoogleAccessToken(String code) throws Exception {
	    // 1. Google Cloud Console에서 발급받은 정보
	    String clientId = "1095911084251-9vedhnalqe4lhkmpakr4t1h7vqe5ld5e.apps.googleusercontent.com"; // ◀◀◀ 여기에 클라이언트 ID 입력
	    String clientSecret = "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"; // ◀◀◀ 여기에 클라이언트 보안 비밀 입력
	    String redirectUri = "http://localhost:8080/user/googleLogin";
	    String tokenUrl = "https://oauth2.googleapis.com/token";

	    URL url = new URL(tokenUrl);
	    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	    conn.setRequestMethod("POST");
	    conn.setDoOutput(true);

        // 2. POST 요청 본문 작성
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
        StringBuilder sb = new StringBuilder();
        sb.append("code=").append(code);
        sb.append("&client_id=").append(clientId);
        sb.append("&client_secret=").append(clientSecret);
        sb.append("&redirect_uri=").append(redirectUri);
        sb.append("&grant_type=authorization_code");
        bw.write(sb.toString());
        bw.flush();

        // [디버깅] 요청 본문 및 응답 코드 출력
        System.out.println("[getGoogleAccessToken] Request Body: " + sb.toString());
        int responseCode = conn.getResponseCode();
        System.out.println("[getGoogleAccessToken] Response Code: " + responseCode);

	    if (responseCode == 200) {
	        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	        String line = "";
	        StringBuilder result = new StringBuilder();
	        while ((line = br.readLine()) != null) {
	            result.append(line);
	        }
	        br.close();
            bw.close();

            // [디버깅] 응답 결과 출력
            System.out.println("[getGoogleAccessToken] Response Body: " + result.toString());

	        ObjectMapper objectMapper = new ObjectMapper();
	        Map<String, Object> jsonMap = objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
	        return (String) jsonMap.get("access_token");
	    }
	    return null;
	}

	private Map<String, Object> getGoogleUserInfo(String accessToken) throws Exception {
	    String userInfoUrl = "https://www.googleapis.com/oauth2/v2/userinfo";
	    URL url = new URL(userInfoUrl);
	    HttpURLConnection conn = (HttpURLConnection) url.openConnection();

	    conn.setRequestMethod("GET");
	    conn.setRequestProperty("Authorization", "Bearer " + accessToken);

        int responseCode = conn.getResponseCode();
        System.out.println("[getGoogleUserInfo] Response Code: " + responseCode);

	    if (responseCode == 200) {
	        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	        String line = "";
	        StringBuilder result = new StringBuilder();
	        while ((line = br.readLine()) != null) {
	            result.append(line);
	        }
	        br.close();

            // [디버깅] 사용자 정보 응답 출력
            System.out.println("[getGoogleUserInfo] Response Body: " + result.toString());

	        ObjectMapper objectMapper = new ObjectMapper();
	        return objectMapper.readValue(result.toString(), new TypeReference<Map<String, Object>>() {});
	    }
	    return null;
	}
}



====== mybatis userMapper.xml

<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
 	
 	
	<resultMap id="userSelectMap" type="user">
		<result property="userId" 			column="user_id" 			jdbcType="VARCHAR"/>
		<result property="userName"	column="user_name" 		jdbcType="VARCHAR" />
		<result property="password" 	column="password" 		jdbcType="VARCHAR" />
		<result property="role" 				column="role" 					jdbcType="VARCHAR" />
		<result property="ssn" 				column="ssn" 					jdbcType="VARCHAR" />
		<result property="phone" 			column="cell_phone" 		jdbcType="VARCHAR" />
		<result property="addr" 				column="addr" 					jdbcType="VARCHAR" />
		<result property="email" 			column="email" 				jdbcType="NUMERIC"  />
		<result property="regDate" 		column="reg_date" 			jdbcType="DATE" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addUser"		parameterType="user" >
	 	INSERT
		INTO users( user_id , user_name , password , role , ssn, cell_phone, addr, email , reg_date) 
		VALUES	 (	#{userId} , #{userName} , #{password} , 'user' , #{ssn:VARCHAR} , 
							#{phone:VARCHAR} , #{addr:VARCHAR} , #{email:VARCHAR} , SYSDATE )
	 </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUser"	parameterType="string"	resultMap="userSelectMap">
		SELECT
		user_id , user_name , password , role ,  cell_phone ,  addr , email , reg_date 		
		FROM users 
		WHERE user_id = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateUser"	parameterType="user" >
	   	UPDATE users
	   	<set>
	   		user_name 	= #{userName} ,
			cell_phone	= #{phone},
			addr 				= #{addr} ,
			email				=	#{email}
	   	</set>
	   	WHERE user_id = #{userId}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT user_id , user_name , email
											FROM users
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				user_id = #{searchKeyword}
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				user_name = #{searchKeyword}
													</if>
												</where>
											</if>
											ORDER BY user_id ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>

	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT user_id , user_name , email
						FROM users
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
						 			user_id = #{searchKeyword}
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
						 		user_name = #{searchKeyword}
								</if>
							</where>
						</if> ) countTable						
	 </select>
	 
</mapper>