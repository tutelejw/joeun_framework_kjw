04.Model2MVCShop(Business Logic,MyBatis Spring)/src/main/resources/sql/Purchase_Mapper_Dao_Service_DAO있을때PRD.txt

프롬프트: MyBatis 기반 DAO & Service & Mapper XML 생성 요청 템플릿
다음 자바 코드와 DB 테이블 구조를 기준으로 MyBatis를 사용하여 다음을 만들어줘:
맨 아래 첨부한 기존의 PurchaseDAO.java를 기준으로 다음을 만들어줘

1. MyBatis 매퍼 XML (`PurchaseMapper.xml`)  
   - 각 SQL에는 필드명을 모두 명시해줘 (`SELECT *` 사용하지 말기)  
   - `item`은 모두 `value`로 통일해줘  
   - `jdbcType` 명시해줘 (Oracle 기준)  
   - 조건 검색 포함 (예: `searchCondition`, `searchKeyword`)  
   - `getPurchaseList`와 `getTotalCount`는 `Search` 객체를 파라미터로 받고, 조건 검색과 페이징 처리를 위한 동적 SQL로 작성해줘  
   - `resultMap`은 생략하지 말고 작성해줘  
   - `resultType`은 도메인 클래스 사용해줘

2. `PurchaseDao` 인터페이스  
   - 메서드는 `public`, `throws Exception` 포함  
   - 실제 구현은 제외하고 시그니처만 작성해줘  
   - 메서드명과 파라미터는 아래 자바 클래스에 맞춰줘

3. `PurchaseService` 인터페이스  
   - 비즈니스 로직을 추상화  
   - DAO와 1:1이 아닌, 비즈니스 관점에서 필요한 메서드만 추려줘  
   - 예: insert, get, update, list 등

---

💾 테이블 DDL:

```sql
CREATE TABLE users ( 
	user_id 			VARCHAR2(20)		NOT NULL,
	user_name 	VARCHAR2(50)		NOT NULL,
	password 		VARCHAR2(10)		NOT NULL,
	role 				VARCHAR2(5) 		DEFAULT 'user',
	ssn 					VARCHAR2(13),
	cell_phone   VARCHAR2(14),
	addr 				VARCHAR2(100),
	email 				VARCHAR2(50),
	reg_date 		DATE,
	PRIMARY KEY(user_id)
);


CREATE TABLE product ( 
	prod_no 					NUMBER 				NOT NULL,
	prod_name 				VARCHAR2(100) 	NOT NULL,
	prod_detail 				VARCHAR2(200),
	manufacture_day   VARCHAR2(10),
	price 							NUMBER(10),
	image_file 					VARCHAR2(100),
	reg_date 					DATE,
	PRIMARY KEY(prod_no)
);

CREATE TABLE transaction ( 
	tran_no 						NUMBER 			NOT NULL,
	prod_no 					NUMBER(16)		NOT NULL REFERENCES product(prod_no),
	buyer_id 					VARCHAR2(20)	NOT NULL REFERENCES users(user_id),
	payment_option     CHAR(3),
	receiver_name 		VARCHAR2(20),
	receiver_phone       VARCHAR2(14),
	demailaddr 				VARCHAR2(100),
	dlvy_request 			VARCHAR2(100),
	tran_status_code   CHAR(3),
	order_date 				DATE,
	dlvy_date 				DATE,
	PRIMARY KEY(tran_no)
);



📦 Search.java 구조:

public class Search {
  private int currentPage;
  private String searchCondition;
  private String searchKeyword;
  private int pageSize;
  private int endRowNum;
  private int startRowNum;
}


📦 Product.java 예시 필드 구조 (추정):

public class Product {
  private int prodNo;
  private String prodName;
  private String prodDetail;
  private String manuDate;
  private int price;
  private String fileName;
  private Date regDate;
  private String proTranCode;  // 상태코드 텍스트
}

public class Purchase {

    /// Field
    private int tranNo;
    private Product purchaseProd;   // product 테이블
    private User buyer;             // users 테이블

    private String paymentOption;
    private String receiverName;
    private String receiverPhone;
    private String deMailAddr;
    private String dlvyRequest;
    private String tranStatusCode;

    private Date orderDate;
    private Date dlvyDate;
}

✍️ 최종 산출물은 다음 3개 파일로 구성해줘:

PurchaseMapper.xml

PurchaseDao.java (인터페이스)

PurchaseService.java (인터페이스)








package com.model2.mvc.service.purchase.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;

import com.model2.mvc.common.Search;
import com.model2.mvc.common.util.DBUtil;
import com.model2.mvc.service.domain.Purchase;
import com.model2.mvc.service.domain.Product;
import com.model2.mvc.service.domain.User;



public class PurchaseDAO {
	
	public PurchaseDAO(){
	}
	public void insertPurchase(Purchase purchase) throws Exception {
		Connection con = DBUtil.getConnection();
		
	        String sql = "	            INSERT INTO transaction (\r\n"
	        		+ "	                tran_no, prod_no, buyer_id, payment_option, receiver_name,\r\n"
	        		+ "	                receiver_phone, demailaddr, dlvy_request, tran_status_code,\r\n"
	        		+ "	                order_date, dlvy_date\r\n"
	        		+ "	            ) VALUES (\r\n"
	        		+ "	                seq_transaction_tran_no.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\r\n"
	        		+ "	            )";
System.out.println("insertPurchase SQL : " + sql);
	        PreparedStatement stmt = con.prepareStatement(sql);
	        stmt.setInt(1, purchase.getPurchaseProd().getProdNo());
	        stmt.setString(2, purchase.getBuyer().getUserId());
	        stmt.setString(3, purchase.getPaymentOption());
	        stmt.setString(4, purchase.getReceiverName());
	        stmt.setString(5, purchase.getReceiverPhone());
	        stmt.setString(6, purchase.getDivyAddr());
	        stmt.setString(7, purchase.getDivyRequest());
	        stmt.setString(8, purchase.getTranCode());
	        stmt.setDate(9, purchase.getOrderDate());

	        // 배송희망일자(String → java.sql.Date 변환)
	        java.sql.Date dlvyDate = null;
	        if (purchase.getDivyDate() != null && !purchase.getDivyDate().isEmpty()) {
	            dlvyDate = java.sql.Date.valueOf(purchase.getDivyDate()); // "yyyy-MM-dd" 형식일 때
	        }

	        stmt.setDate(10, dlvyDate);
			stmt.executeUpdate();
			con.close();
	}

	public Purchase findPurchase(int tranNo) throws Exception {
	    
	    Connection con = DBUtil.getConnection();

	    String sql = "SELECT "
	            + " T.tran_no, T.prod_no, T.buyer_id, U.user_name, "
	            + " T.PAYMENT_OPTION, T.receiver_name, T.receiver_phone, T.DEMAILADDR, T.dlvy_request, T.DLVY_DATE, T.ORDER_DATE "
	            + "FROM transaction T "
	            + "JOIN users U ON T.buyer_id = U.user_id "
	            + "WHERE T.TRAN_NO = ?";

	    PreparedStatement stmt = con.prepareStatement(sql);
	    stmt.setInt(1, tranNo);

	    ResultSet rs = stmt.executeQuery();

	    Purchase purchase = null;
	    if (rs.next()) {
	        purchase = new Purchase();

	        // Product 생성 및 설정
	        Product product = new Product();
	        product.setProdNo(rs.getInt("prod_no"));
	        purchase.setPurchaseProd(product);

	        // User 생성 및 설정
	        User buyer = new User();
	        buyer.setUserId(rs.getString("buyer_id"));
	        buyer.setUserName(rs.getString("user_name"));  // 이름 세팅 추가
	        purchase.setBuyer(buyer);

	        // 나머지 필드 설정
	        purchase.setTranNo(rs.getInt("tran_no"));
	        purchase.setPaymentOption(rs.getString("payment_option"));
	        purchase.setReceiverName(rs.getString("receiver_name"));
	        purchase.setReceiverPhone(rs.getString("receiver_phone"));
	        purchase.setDivyAddr(rs.getString("demailaddr"));
	        purchase.setDivyRequest(rs.getString("dlvy_request"));
	        purchase.setDivyDate(rs.getString("dlvy_date"));
	        purchase.setOrderDate(rs.getDate("order_date"));
	    }

	    con.close();

	    return purchase;
	}


	public HashMap<String,Object> getPurchaseList(Search search) throws Exception {
	    
	    Connection con = DBUtil.getConnection();
	    HashMap<String,Object> map = new HashMap<>();

	    // 1. 기본 SQL
	    String sql = 
	        "SELECT T.tran_no, T.prod_no, T.buyer_id, U.user_name, " +
	        "       T.receiver_name, T.receiver_phone, T.dlvy_request, " +
	        "       CASE TRIM(T.tran_status_code) " +
	        "            WHEN '0' THEN '판매중' " +
	        "            WHEN '1' THEN '구매완료' " +
	        "            WHEN '2' THEN '배송중' " +
	        "            WHEN '3' THEN '배송완료' " +
	        "            ELSE '알수없음' " +
	        "       END AS tran_status_code " +
	        " FROM transaction T " +
	        " JOIN users U ON T.buyer_id = U.user_id ";

	    // 2. 검색 조건 적용
	    if (search.getSearchCondition() != null && search.getSearchKeyword() != null && !search.getSearchKeyword().isEmpty()) {
	        if (search.getSearchCondition().equals("0")) {
	            sql += " WHERE T.buyer_id LIKE '%" + search.getSearchKeyword() + "%' ";
	        } else if (search.getSearchCondition().equals("1")) {
	            sql += " WHERE T.receiver_name LIKE '%" + search.getSearchKeyword() + "%' ";
	        }
	    }

	    // 3. 정렬
	    sql += " ORDER BY T.tran_no DESC ";

	    // 4. totalCount 조회
	    int totalCount = getTotalCount(sql);
	    //map.put("count", totalCount);
	    map.put("totalCount", totalCount);

	    // 5. 페이징 쿼리 생성
	    String pagingSql = makeCurrentPageSql(sql, search);
	    System.out.println("getPurchaseList 페이징 SQL:\n" + pagingSql);

	    // 6. 쿼리 실행
	    PreparedStatement stmt = con.prepareStatement(pagingSql);
	    ResultSet rs = stmt.executeQuery();

	    ArrayList<Purchase> list = new ArrayList<>();

	    while (rs.next()) {
	        Purchase vo = new Purchase();
	        vo.setTranNo(rs.getInt("TRAN_NO"));
	        vo.setReceiverName(rs.getString("RECEIVER_NAME"));
	        vo.setReceiverPhone(rs.getString("RECEIVER_PHONE"));
	        vo.setDivyRequest(rs.getString("DLVY_REQUEST"));
	        vo.setTranCode(rs.getString("TRAN_STATUS_CODE"));

	        Product product = new Product();
	        product.setProdNo(rs.getInt("PROD_NO"));
	        vo.setPurchaseProd(product);

	        User buyer = new User();
	        buyer.setUserId(rs.getString("BUYER_ID"));
	        buyer.setUserName(rs.getString("USER_NAME"));
	        vo.setBuyer(buyer);

	        list.add(vo);
	    }

	    rs.close();
	    stmt.close();
	    con.close();

	    // 7. 결과 map 저장
	    map.put("list", list);

	    return map;
	}
	
	// 전체 Row 수 구하는 메서드
	private int getTotalCount(String sql) throws Exception {
	    sql = "SELECT COUNT(*) FROM (" + sql + ") countTable";
	    Connection con = DBUtil.getConnection();
	    PreparedStatement pStmt = con.prepareStatement(sql);
	    ResultSet rs = pStmt.executeQuery();
	    
	    int totalCount = 0;
	    if (rs.next()) {
	        totalCount = rs.getInt(1);
	    }
	    
	    rs.close();
	    pStmt.close();
	    con.close();
	    
	    return totalCount;
	}

	// 현재 페이지용 SQL 생성
	private String makeCurrentPageSql(String sql, Search search) {
	    sql = 
	        "SELECT * FROM ( " +
	        "  SELECT inner_table.*, ROWNUM AS row_seq " +
	        "  FROM ( " + sql + " ) inner_table " +
	        "  WHERE ROWNUM <= " + (search.getCurrentPage() * search.getPageSize()) +
	        ") " +
	        "WHERE row_seq >= " + ((search.getCurrentPage() - 1) * search.getPageSize() + 1);
	    
	    return sql;
	}


//
    // 구매 정보 수정 메서드
    // 구매 정보 수정 메서드
    public void updatePurchase(Purchase purchase) throws SQLException {
        // DB 연결
        Connection con = DBUtil.getConnection();
//SELECT receiver_name, receiver_phone, demailaddr, dlvy_request, dlvy_date FROM transaction ;
        String sql = " UPDATE transaction SET "
                + " receiver_name = ?, receiver_phone = ?, demailaddr = ?, dlvy_request = ?, dlvy_date = ? "
                + " WHERE tran_no = ?";

        PreparedStatement stmt = con.prepareStatement(sql);

        // ?에 값 설정
        stmt.setString(1, purchase.getReceiverName());
        stmt.setString(2, purchase.getReceiverPhone());
        stmt.setString(3, purchase.getDivyAddr());
        stmt.setString(4, purchase.getDivyRequest());
        stmt.setString(5, purchase.getDivyDate());
        stmt.setInt(6, purchase.getTranNo());

        // 쿼리 실행
        int rowsUpdated = stmt.executeUpdate();
        System.out.println("Rows updated: " + rowsUpdated); // 디버깅용 출력

        // 리소스 해제
         con.close();
    }
    
    public void updatePurchaseDelivery(int prodNo, int tranCode) throws Exception {
        Connection con = DBUtil.getConnection();
        System.out.println(getClass().getSimpleName() + " :: prodNo / tranCode  : " + prodNo +" / "+ tranCode);
        String sql = "UPDATE transaction SET tran_status_code = ? WHERE prod_no = ?";
        PreparedStatement stmt = con.prepareStatement(sql);
        stmt.setInt(1, tranCode);
        stmt.setInt(2, prodNo);

        int result = stmt.executeUpdate();
        System.out.println("배송상태 업데이트 결과: " + result + "건");

//        stmt.close();
        con.close();
    }

}


CREATE TABLE product ( 
	prod_no 					NUMBER 				NOT NULL,
	prod_name 				VARCHAR2(100) 	NOT NULL,
	prod_detail 				VARCHAR2(200),
	manufacture_day   VARCHAR2(10),
	price 							NUMBER(10),
	image_file 					VARCHAR2(100),
	reg_date 					DATE,
	PRIMARY KEY(prod_no)
);



package com.model2.mvc.service.product.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import com.model2.mvc.common.Search;
import com.model2.mvc.common.util.DBUtil;
import com.model2.mvc.service.domain.Product;


public class ProductDao {
	
	///Field
	
	///Constructor
	public ProductDao() {
	}

	///Method
	public void insertProduct(Product product) throws Exception {
		
		Connection con = DBUtil.getConnection();
		

		String sql = "INSERT INTO PRODUCT (PROD_NO,IMAGE_FILE, MANUFACTURE_DAY, PRICE, PROD_DETAIL, PROD_NAME, REG_DATE) values "
								+ "(seq_product_prod_no.nextval,?,?,?,?,?,sysdate)";
		
		PreparedStatement pStmt = con.prepareStatement(sql);
		pStmt.setString(1, product.getFileName());
		pStmt.setString(2, product.getManuDate());
		pStmt.setInt(3, product.getPrice());
		pStmt.setString(4, product.getProdDetail());
		pStmt.setString(5, product.getProdName());
		pStmt.executeUpdate();
		
		System.out.println("ProductDao - insertProduct method 부분 : " + sql);
		
		pStmt.close();
		con.close();
	}

	
	public Product findProduct(String prodNo) throws Exception {
		
		Connection con = DBUtil.getConnection();
			
		String sql = "SELECT PROD_NO,\r\n"
				+ "    PROD_NAME,\r\n"
				+ "    PROD_DETAIL,\r\n"
				+ "    MANUFACTURE_DAY,\r\n"
				+ "    PRICE,\r\n"
				+ "    IMAGE_FILE,\r\n"
				+ "    REG_DATE \r\n"
				+ "	 FROM PRODUCT where PROD_NO=?";
		
		PreparedStatement pStmt = con.prepareStatement(sql);
		pStmt.setString(1, prodNo);

		ResultSet rs = pStmt.executeQuery();

		Product product = null;
		while (rs.next()) {
			product = new Product();
			product.setProdNo(rs.getInt("PROD_NO"));
			product.setProdName(rs.getString("PROD_NAME"));
			product.setProdDetail(rs.getString("PROD_DETAIL"));
			product.setManuDate(rs.getString("MANUFACTURE_DAY"));
			product.setPrice(rs.getInt("PRICE"));
			product.setFileName(rs.getString("IMAGE_FILE"));
			product.setRegDate(rs.getDate("REG_DATE"));
		}
		
		System.out.println("ProductDao - findProduct method 부분 : " + sql);
		
		rs.close();
		pStmt.close();
		con.close();
		
		return product;
	}

	public Map<String , Object> getProductList(Search search) throws Exception {
		
		Map<String , Object>  map = new HashMap<String, Object>();
		
		Connection con = DBUtil.getConnection();
		
		// 거래 상태 코드 포함을 위해 TRANSACTION 테이블 JOIN
		String sql = 
			    "SELECT P.PROD_NO, P.PROD_NAME, P.PROD_DETAIL, P.MANUFACTURE_DAY, " +
			    "       P.PRICE, P.IMAGE_FILE, P.REG_DATE, " +
			    "       CASE WHEN T.PROD_NO IS NOT NULL THEN '재고없음' ELSE '판매중' END AS TRAN_STATUS_TEXT " +
			    "FROM PRODUCT P LEFT JOIN TRANSACTION T ON P.PROD_NO = T.PROD_NO";
	
	    if (search.getSearchCondition() != null) {
			if ( search.getSearchCondition().equals("0") &&  !search.getSearchKeyword().equals("") ) {
	    		sql += " where P.PROD_NO like '%" + search.getSearchKeyword() + "%' ";
				} else if ( search.getSearchCondition().equals("1") && !search.getSearchKeyword().equals("")) {
	    		sql += " where P.PROD_NAME like '%" + search.getSearchKeyword() + "%' ";
	    	}
	    }
	    sql += " ORDER BY P.PROD_NO DESC";

	    System.out.println("ProductDAO getProductList - SQL : "+sql);
	    System.out.println("ProductDAO::Original SQL :: " + sql);
		
		//==> TotalCount GET
		int totalCount = this.getTotalCount(sql);
		System.out.println("ProductDAO :: totalCount  :: " + totalCount);
		
		//==> CurrentPage 게시물만 받도록 Query 다시구성
		sql = makeCurrentPageSql(sql, search);
		PreparedStatement pStmt = con.prepareStatement(sql);
		ResultSet rs = pStmt.executeQuery();
	
		System.out.println(search);

		List<Product> list = new ArrayList<Product>();
		
		while(rs.next()){
			Product product = new Product();
			product.setProdNo(rs.getInt("PROD_NO"));
			product.setProdName(rs.getString("PROD_NAME"));
			product.setProdDetail(rs.getString("PROD_DETAIL"));
			product.setManuDate(rs.getString("MANUFACTURE_DAY"));
			product.setPrice(rs.getInt("PRICE"));
			product.setFileName(rs.getString("IMAGE_FILE"));
			product.setRegDate(rs.getDate("REG_DATE"));
			product.setProTranCode(rs.getString("TRAN_STATUS_TEXT"));  // 바로 상태텍스트 세팅
			list.add(product);
		}
	    System.out.println("ProductDAO getProductList -  List<Product> list  : ");
	    
		//==> totalCount 정보 저장
		map.put("totalCount", new Integer(totalCount));
		//==> currentPage 의 게시물 정보 갖는 List 저장
		map.put("list", list);

		rs.close();
		pStmt.close();
		con.close();

		return map;
	}

	public void updateProduct(Product vo) throws Exception {
	    // 로그를 추가하여 값 확인
	    System.out.println("ProductDao 의 updateProduct 실행 시작");
	    System.out.println("Received Product:");
	    System.out.println("Product Name: " + vo.getProdName());
	    System.out.println("Product Detail: " + vo.getProdDetail());
	    System.out.println("Manufacture Date: " + vo.getManuDate());
	    System.out.println("Price: " + vo.getPrice());
	    System.out.println("File Name: " + vo.getFileName());
	    System.out.println("Product No: " + vo.getProdNo());
	    
		Connection con = DBUtil.getConnection();

		String sql = "update PRODUCT set PROD_NAME=?,PROD_DETAIL=?,MANUFACTURE_DAY=?,PRICE=?,IMAGE_FILE=? where PROD_NO=?";
		
		PreparedStatement pStmt = con.prepareStatement(sql);
		pStmt.setString(1, vo.getProdName());
		pStmt.setString(2, vo.getProdDetail());
		pStmt.setString(3, vo.getManuDate());
		pStmt.setInt(4,vo.getPrice());
		pStmt.setString(5, vo.getFileName());
		pStmt.setInt(6,vo.getProdNo());

		System.out.println("Executing SQL: " + sql);
		System.out.println("Product No: " + vo.getProdNo());
		
		int result = pStmt.executeUpdate();
		System.out.println("updateProduct - executeUdate result : " + result);
		
		pStmt.close();
		con.close();
	}
	
	// 게시판 Page 처리를 위한 전체 Row(totalCount)  return
	private int getTotalCount(String sql) throws Exception {
		
		sql = "SELECT COUNT(*) "+
		          "FROM ( " +sql+ ") countTable";
		
		Connection con = DBUtil.getConnection();
		PreparedStatement pStmt = con.prepareStatement(sql);
		ResultSet rs = pStmt.executeQuery();
		
		int totalCount = 0;
		if( rs.next() ){
			totalCount = rs.getInt(1);  //CONT(*) 
		}
		
		pStmt.close();
		con.close();
		rs.close();
		
		return totalCount;
	}
	
	// 게시판 currentPage Row 만  return 
	private String makeCurrentPageSql(String sql , Search search){
		sql = 	"SELECT * "+ 
					"FROM (		SELECT inner_table. * ,  ROWNUM AS row_seq " +
									" 	FROM (	"+sql+" ) inner_table "+
									"	WHERE ROWNUM <="+search.getCurrentPage()*search.getPageSize()+" ) " +
					"WHERE row_seq BETWEEN "+((search.getCurrentPage()-1)*search.getPageSize()+1) +" AND "+search.getCurrentPage()*search.getPageSize();
		
		System.out.println("ProductDAO :: make SQL :: "+ sql);	
		
		return sql;
	}
}




package com.model2.mvc.common;


//==>리스트화면을 모델링(추상화/캡슐화)한 Bean 
public class Search {
	
	///Field
	private int currentPage;
	private String searchCondition;
	private String searchKeyword;
	private int pageSize;
	//==> 리스트화면 currentPage에 해당하는 회원정보를 ROWNUM 사용 SELECT 위해 추가된 Field 
	//==> UserMapper.xml 의 
	//==> <select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	//==> 참조
	private int endRowNum;
	private int startRowNum;
	
	///Constructor
	public Search() {
	}
	
	///Method
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int paseSize) {
		this.pageSize = paseSize;
	}
	
	public int getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public String getSearchCondition() {
		return searchCondition;
	}
	public void setSearchCondition(String searchCondition) {
		this.searchCondition = searchCondition;
	}
	
	public String getSearchKeyword() {
		return searchKeyword;
	}
	public void setSearchKeyword(String searchKeyword) {
		this.searchKeyword = searchKeyword;
	}
	
	//==> Select Query 시 ROWNUM 마지막 값 
	public int getEndRowNum() {
		return getCurrentPage()*getPageSize();
	}
	//==> Select Query 시 ROWNUM 시작 값
	public int getStartRowNum() {
		return (getCurrentPage()-1)*getPageSize()+1;
	}

	@Override
	public String toString() {
		return "Search [currentPage=" + currentPage + ", searchCondition="
				+ searchCondition + ", searchKeyword=" + searchKeyword
				+ ", pageSize=" + pageSize + ", endRowNum=" + endRowNum
				+ ", startRowNum=" + startRowNum + "]";
	}
}