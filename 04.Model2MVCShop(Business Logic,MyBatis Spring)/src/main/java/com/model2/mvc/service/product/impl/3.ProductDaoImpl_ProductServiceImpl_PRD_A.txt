04.Model2MVCShop(Business Logic,MyBatis Spring)/src/main/java/com/model2/mvc/service/product/impl/3.ProductDaoImpl_ProductServiceImpl_PRD.txt

Spring + MyBatis 기반 프로젝트에서 DAO 구현체를 작성하려고 해.
아래 자료를 참고해서 ProductDaoImpl.java ProductServiceImpl.java파일을 만들어줘.

[참고 파일]
- ProductDao.java : Product 관련 DAO 인터페이스
- ProductService.java : Product 서비스 계층 인터페이스
- ProductMapper.xml : Product 테이블에 대한 MyBatis SQL 매퍼(XML)

[작성 조건]
1. 패키지 경로는 반드시 다음과 같이 해줘:
   package com.model2.mvc.service.product.impl;

2. 클래스명: ProductDaoImpl
   - ProductDao 인터페이스를 implements 해야 함.

3. MyBatis SqlSession 주입
   - Spring 환경에서 @Autowired로 SqlSession 주입받기
   - SqlSessionTemplate 또는 SqlSession 사용 가능

4. 메서드 동작
   - add INSERT 실행 후 영향을 받은 행 수(int) 리턴
   - find SELECT 실행 후 객체 리턴
   - update UPDATE 실행 후 영향을 받은 행 수 리턴
   - del DELETE 실행 후 영향을 받은 행 수 리턴
   - List SELECT 실행 후 List<객체> 리턴
   - getTotalCount(Search search) → SELECT 실행 후 int 리턴

5. 디버깅 목적
   - 생성자 호출 시 System.out.println("==> " + getClass() + " 생성자 호출");
   - setter 호출 시에도 로그 출력
   - 각 메서드 실행 시 SQL 실행 결과(affected rows, 조회 결과 등) 출력

6. 모든 메서드는 `throws Exception` 선언 (교육용으로 try-catch 생략)

7. 코드 스타일
   - @Repository("productDao") 애노테이션 붙이기
   - MyBatis 매퍼의 namespace는 "ProductMapper" 사용
   - sqlSession.insert("ProductMapper.addProduct", product) 형식으로 호출
   - INSERT, UPDATE, DELETE는 실행 후 반환값을 변수에 담아 로그 출력
   - SELECT는 결과 객체/리스트를 변수에 담아 로그 출력
   
   
   
package com.model2.mvc.service.product;

import java.util.Map;
import com.model2.mvc.common.Search;
import com.model2.mvc.service.domain.Product;

public interface ProductDao {

    public void insertProduct(Product product) throws Exception;

    public Product findProduct(String prodNo) throws Exception;

    public int getTotalCount(Search search) throws Exception;

    public Map<String, Object> getProductList(Search search) throws Exception;

    public void updateProduct(Product product) throws Exception;
}




package com.model2.mvc.service.product;

import java.util.Map;
import com.model2.mvc.common.Search;
import com.model2.mvc.service.domain.Product;

public interface ProductService {
    
    public void addProduct(Product product) throws Exception;

    public Product getProduct(int prodNo) throws Exception;

    public Map<String, Object> getProductList(Search search) throws Exception;

    public void updateProduct(Product product) throws Exception;

    public int getTotalCount(Search search) throws Exception; // 👈 추가 가능
}



<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.model2.mvc.service.product.ProductDao">

  <!-- ResultMap for Product -->
  <resultMap id="productResultMap" type="com.model2.mvc.service.domain.Product">
    <id property="prodNo" column="PROD_NO" jdbcType="INTEGER"/>
    <result property="prodName" column="PROD_NAME" jdbcType="VARCHAR"/>
    <result property="prodDetail" column="PROD_DETAIL" jdbcType="VARCHAR"/>
    <result property="manuDate" column="MANUFACTURE_DAY" jdbcType="VARCHAR"/>
    <result property="price" column="PRICE" jdbcType="INTEGER"/>
    <result property="fileName" column="IMAGE_FILE" jdbcType="VARCHAR"/>
    <result property="regDate" column="REG_DATE" jdbcType="DATE"/>
    <result property="proTranCode" column="TRAN_STATUS_TEXT" jdbcType="VARCHAR"/>
  </resultMap>

  <!-- Insert Product -->
  <insert id="insertProduct" parameterType="com.model2.mvc.service.domain.Product">
    INSERT INTO PRODUCT (
      PROD_NO, IMAGE_FILE, MANUFACTURE_DAY, PRICE, PROD_DETAIL, PROD_NAME, REG_DATE
    )
    VALUES (
      seq_product_prod_no.NEXTVAL,
      #{fileName, jdbcType=VARCHAR},
      #{manuDate, jdbcType=VARCHAR},
      #{price, jdbcType=INTEGER},
      #{prodDetail, jdbcType=VARCHAR},
      #{prodName, jdbcType=VARCHAR},
      SYSDATE
    )
  </insert>

  <!-- Find Product -->
  <select id="findProduct" parameterType="String" resultMap="productResultMap">
    SELECT
      P.PROD_NO, P.PROD_NAME, P.PROD_DETAIL, P.MANUFACTURE_DAY,
      P.PRICE, P.IMAGE_FILE, P.REG_DATE,
      CASE
        WHEN T.PROD_NO IS NOT NULL THEN '재고없음'
        ELSE '판매중'
      END AS TRAN_STATUS_TEXT
    FROM PRODUCT P
    LEFT JOIN TRANSACTION T ON P.PROD_NO = T.PROD_NO
    WHERE P.PROD_NO = #{value, jdbcType=VARCHAR}
  </select>

  <!-- Get Total Count -->
  <select id="getTotalCount" parameterType="com.model2.mvc.common.Search" resultType="int">
    SELECT COUNT(*)
    FROM PRODUCT P
    LEFT JOIN TRANSACTION T ON P.PROD_NO = T.PROD_NO
    <where>
      <if test="searchCondition != null and searchKeyword != null and searchKeyword != ''">
        <choose>
          <when test="searchCondition == '0'">
            AND P.PROD_NO LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
          </when>
          <when test="searchCondition == '1'">
            AND P.PROD_NAME LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
          </when>
        </choose>
      </if>
    </where>
  </select>

  <!-- Get Product List (페이징 포함) -->
  <select id="getProductList" parameterType="com.model2.mvc.common.Search" resultMap="productResultMap">
    SELECT * FROM (
      SELECT ROWNUM AS RNUM, A.* FROM (
        SELECT
          P.PROD_NO, P.PROD_NAME, P.PROD_DETAIL, P.MANUFACTURE_DAY,
          P.PRICE, P.IMAGE_FILE, P.REG_DATE,
          CASE
            WHEN T.PROD_NO IS NOT NULL THEN '재고없음'
            ELSE '판매중'
          END AS TRAN_STATUS_TEXT
        FROM PRODUCT P
        LEFT JOIN TRANSACTION T ON P.PROD_NO = T.PROD_NO
        <where>
          <if test="searchCondition != null and searchKeyword != null and searchKeyword != ''">
            <choose>
              <when test="searchCondition == '0'">
                AND P.PROD_NO LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
              </when>
              <when test="searchCondition == '1'">
                AND P.PROD_NAME LIKE '%' || #{searchKeyword, jdbcType=VARCHAR} || '%'
              </when>
            </choose>
          </if>
        </where>
        ORDER BY P.PROD_NO DESC
      ) A
      WHERE ROWNUM &lt;= #{endRowNum, jdbcType=INTEGER}
    )
    WHERE RNUM &gt;= #{startRowNum, jdbcType=INTEGER}
  </select>

  <!-- Update Product -->
  <update id="updateProduct" parameterType="com.model2.mvc.service.domain.Product">
    UPDATE PRODUCT
    SET
      PROD_NAME = #{prodName, jdbcType=VARCHAR},
      PROD_DETAIL = #{prodDetail, jdbcType=VARCHAR},
      MANUFACTURE_DAY = #{manuDate, jdbcType=VARCHAR},
      PRICE = #{price, jdbcType=INTEGER},
      IMAGE_FILE = #{fileName, jdbcType=VARCHAR}
    WHERE PROD_NO = #{prodNo, jdbcType=INTEGER}
  </update>

</mapper>
