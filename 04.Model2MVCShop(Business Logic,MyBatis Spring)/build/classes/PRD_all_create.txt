
 DB → Domain → Mapper → DAO → DAOImpl →  Service →  ServiceImpl → Controller → View(JSP) 순서대로 GPT 프롬프트를 던지면, 각 단계별로 자동으로 코드를 생성해줄 수 있습니다.
test
 Product 예시 흐름 (상품 등록)

Controller
ProductController.addProduct() 실행
productService.addProduct(product) 호출

Service
ProductServiceImpl.addProduct() 실행
상품 정보 검증, 추가 로직 처리 가능
productDAO.addProduct(product) 호출

DAO
ProductDAOImpl.addProduct() 실행
ProductMapper.addProduct SQL 실행

DB
INSERT INTO product ... 실행


 
자바 MVC + Spring + MyBatis 쇼핑몰 프로젝트를 GPT 프롬프트를 통해 새로 제작한다면, 순서는 다음처럼 진행하는 게 가장 효율적입니다:

📌 GPT를 활용한 제작 순서
1단계. 프로젝트 스켈레톤 생성
프롬프트: “Spring MVC + MyBatis 기반 쇼핑몰 프로젝트 기본 구조를 만들어줘. Maven/Gradle 설정 포함해서 Controller, Service, DAO, Mapper, Domain 패키지를 생성해줘.”
결과: pom.xml or build.gradle, 기본 패키지 구조, applicationContext.xml, web.xml 생성

2단계. DB 스키마 설계 및 생성
프롬프트: “쇼핑몰의 사용자(users), 상품(product), 거래(transaction) 테이블을 Oracle/MySQL에 맞게 SQL 스크립트를 만들어줘.”
결과: initialize.sql 생성 → DB에 실행

3단계. Domain(VO/DTO) 클래스 생성
프롬프트: “users, product, transaction 테이블에 맞는 Java DTO 클래스(Product)를 생성해줘.”
결과: Product.java

4단계. MyBatis 매퍼 생성
프롬프트: “Product 테이블에 대한 CRUD를 수행하는 MyBatis Mapper XML과 인터페이스를 생성해줘.”
결과: ProductMapper.xml, ProductDAO.java

5단계. DAO → Service 계층 구현
프롬프트: “ProductDAO를 이용해서 상품 등록, 조회, 수정, 삭제를 처리하는 ProductService 인터페이스와 구현체를 작성해줘.”
결과: ProductService.java, ProductServiceImpl.java


10단계. 테스트 및 배포 Business Layer unit Test : Service + Persistence
프롬프트: “JUnit을 이용해서 ProductService 테스트 코드를 작성해줘.”


6단계. Controller 계층 구현
프롬프트: “Spring MVC Controller를 만들어서 /product/list, /product/add 같은 요청을 처리하고 JSP 뷰로 데이터를 넘겨줘.”
결과: ProductController.java

7단계. JSP 뷰 제작
프롬프트: “상품 목록을 JSTL을 이용해서 테이블 형태로 출력하는 productList.jsp를 만들어줘.”
결과: productList.jsp, productDetail.jsp, productForm.jsp

8단계. 로그인 & 세션 관리
프롬프트: “users 테이블을 이용한 로그인 기능을 Spring Controller와 JSP로 구현해줘. 로그인 성공 시 세션에 user 정보를 저장해줘.”

9단계. 트랜잭션/비즈니스 로직 확장
프롬프트: “상품 구매(transaction) 기능을 추가해줘. 구매 시 product 재고 감소 로직을 포함해줘.”

10단계. 테스트 및 배포
프롬프트: “JUnit을 이용해서 ProductService 테스트 코드를 작성해줘.”

결과: ProductServiceTest.java
이후 톰캣 실행 → 웹 브라우저에서 확인
