**“GPT에게 코드 생성을 요청할 때 사용할 프롬프트 템플릿”**을 단계별로 정리해드릴게요.

DB → Domain → Mapper → DAO → DAOImpl →  Service →  ServiceImpl → Controller
DB 구조 → SQL → DAO → Service 순서가 핵심
Service/DAO는 결국 SQL을 실행하기 위한 껍데기라서, SQL/Mapper를 먼저 잡는 게 가장 효율적

1. 사전 준비물 (필요 파일 및 정보)

Domain 클래스 정의

User.java / Product.java

필드, getter/setter, toString() 정의.

예: Product(productId, productName, price, description, manufactureDate, ...)

DB 테이블 구조

users 테이블 구조 참고 → products 테이블 스키마 정의 필요.

ex) product_id, product_name, price, stock, description, reg_date

MyBatis Mapper (XML)

UserMapper.xml 참고 → ProductMapper.xml 설계

CRUD SQL 작성 (insert/select/update/list/count)

Spring 설정 파일

commonservice.xml, mybatis-config.xml 은 공통 사용.

mybatis-config.xml 안에 <mapper resource="sql/ProductMapper.xml"/> 추가.

2. 구현 순서

Domain (Product.java)
→ DB 테이블과 매핑되는 VO/DTO 클래스

DAO 인터페이스 (ProductDao.java)
→ CRUD 메서드 정의 (addProduct, getProduct, updateProduct, getProductList, getTotalCount)

DAO 구현체 (ProductDaoImpl.java)
→ SqlSessionTemplate 사용하여 Mapper XML 실행

Service 인터페이스 (ProductService.java)
→ DAO 메서드들을 서비스 단에서 선언

Service 구현체 (ProductServiceImpl.java)
→ @Autowired ProductDao 주입받아 비즈니스 로직 구현

Mapper XML (ProductMapper.xml)
→ SQL 정의 (insert/select/update/selectList/count)

Test (ProductServiceTest.java)
→ JUnit으로 동작 확인

3. GPT 요청용 프롬프트 예시 (순서별)
(1) Domain 클래스 생성
Spring + MyBatis 환경에서 사용할 Product 도메인 클래스를 만들어줘.
필드: productId(String), productName(String), price(int), stock(int), description(String), manufactureDate(Date), regDate(Date)
getter/setter, toString() 포함한 Java 클래스(Product.java)를 작성해줘.

(2) DAO 인터페이스
Product 테이블 CRUD 처리를 위한 DAO 인터페이스(ProductDao.java)를 만들어줘.
필요 메서드:
- addProduct(Product product)
- getProduct(String productId)
- updateProduct(Product product)
- getProductList(Search search)
- getTotalCount(Search search)

(3) DAO 구현체
ProductDao 인터페이스를 구현하는 ProductDaoImpl.java 클래스를 작성해줘.
Spring의 @Repository 애노테이션 사용.
SqlSessionTemplate을 주입받아 ProductMapper.xml의 SQL을 호출하도록 작성해줘.

(4) Service 인터페이스
Product 관리 로직을 위한 Service 인터페이스(ProductService.java)를 만들어줘.
ProductDao의 메서드를 기반으로 CRUD 메서드를 선언해줘.

(5) Service 구현체
ProductService 인터페이스를 구현하는 ProductServiceImpl.java를 작성해줘.
@Service 애노테이션 사용.
@Autowired로 ProductDao를 주입받고, 각 메서드에서 DAO를 호출하도록 작성해줘.

(6) Mapper XML
MyBatis Mapper 파일(ProductMapper.xml)을 작성해줘.
namespace="ProductMapper"
SQL:
- addProduct
- getProduct
- updateProduct
- getProductList (페이징, 검색 조건 포함)
- getTotalCount
resultMap도 정의해줘.

(7) 단위 테스트
JUnit 기반으로 ProductService의 CRUD 메서드를 테스트하는 ProductServiceTest.java를 작성해줘.
Spring context 로딩, @Autowired ProductService 주입, add/get/update/getList/getTotalCount 테스트 케이스 포함.


✅ 이렇게 User → Product 모듈로 확장할 때는, 기본 뼈대(DAO/Service/Mapper/Domain/Test) 구조를 동일하게 유지하면 관리가 쉬워집니다.